{"ast":null,"code":"import _objectSpread from\"/Users/zuuki/Desktop/Web/snake-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback,useRef}from'react';import{db}from'../firebase';import{collection,addDoc,query,orderBy,limit,getDocs,where,onSnapshot}from'firebase/firestore';import'../styles/SnakeGame.css';// コレクション名を取得する関数を追加\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const getCollectionName=(mode,difficulty)=>{if(mode==='difficulty'){switch(difficulty){case'beginner':return'scoreslow';case'intermediate':return'scoresmiddle';case'advanced':return'scoreshigh';default:return'scores';}}return'scores';};const SnakeGame=_ref=>{let{mode='normal',difficulty='normal',settings=null,onGameOver=null}=_ref;// グリッドの中央を計算\nconst gridSize=20;const centerX=Math.floor(gridSize/2);const centerY=Math.floor(gridSize/2);// 中央から右向きに3マス分の初期位置を設定\nconst initialSnake=[[centerX,centerY],// 頭\n[centerX-1,centerY],// 胴体\n[centerX-2,centerY]// 尾\n];const[snake,setSnake]=useState(initialSnake);const[food,setFood]=useState([0,0]);const[direction,setDirection]=useState('RIGHT');const directionRef=useRef(direction);const[gameOver,setGameOver]=useState(false);const[score,setScore]=useState(0);const[isPlaying,setIsPlaying]=useState(false);const[highScore,setHighScore]=useState(()=>{const saved=localStorage.getItem('snakeHighScore');return saved?parseInt(saved):0;});const[topScores,setTopScores]=useState([]);const[timeLeft,setTimeLeft]=useState(mode==='time'?settings.initialTime:null);const[isTimeUp,setIsTimeUp]=useState(false);const calculateSpeed=useCallback(score=>{if(mode==='difficulty'&&settings){const speedIncrease=Math.floor(score/5)*settings.speedIncrease;return Math.max(settings.minSpeed,settings.speed-speedIncrease);}// 通常モードのデフォルト速度計算\nconst baseSpeed=200;const speedIncrease=Math.floor(score/5)*10;return Math.max(60,baseSpeed-speedIncrease);},[mode,settings]);const generateFood=useCallback(()=>{let newFood;do{newFood=[Math.floor(Math.random()*gridSize),Math.floor(Math.random()*gridSize)];}while(snake.some(segment=>segment[0]===newFood[0]&&segment[1]===newFood[1]));setFood(newFood);},[snake]);useEffect(()=>{directionRef.current=direction;},[direction]);const moveSnake=useCallback(()=>{if(gameOver||!isPlaying)return;const newSnake=[...snake];const head=[...newSnake[0]];switch(directionRef.current){case'UP':head[1]-=1;break;case'DOWN':head[1]+=1;break;case'LEFT':head[0]-=1;break;case'RIGHT':head[0]+=1;break;default:break;}if(head[0]<0||head[0]>=gridSize||head[1]<0||head[1]>=gridSize){setGameOver(true);return;}if(newSnake.some(segment=>segment[0]===head[0]&&segment[1]===head[1])){setGameOver(true);return;}newSnake.unshift(head);if(head[0]===food[0]&&head[1]===food[1]){setScore(prev=>{const newScore=prev+1;if(newScore>highScore){setHighScore(newScore);localStorage.setItem('snakeHighScore',newScore.toString());}return newScore;});generateFood();}else{newSnake.pop();}setSnake(newSnake);},[snake,food,gameOver,generateFood,highScore,isPlaying]);useEffect(()=>{if(!isPlaying&&!gameOver){generateFood();}},[]);useEffect(()=>{const handleKeyPress=e=>{if(e.key==='ArrowUp'||e.key==='ArrowDown'||e.key==='ArrowLeft'||e.key==='ArrowRight'||e.code==='Space'){e.preventDefault();}if(e.code==='Space'){if(gameOver){resetGame();}else{setIsPlaying(prev=>!prev);}return;}if(!isPlaying)return;switch(e.key){case'ArrowUp':if(directionRef.current!=='DOWN')setDirection('UP');break;case'ArrowDown':if(directionRef.current!=='UP')setDirection('DOWN');break;case'ArrowLeft':if(directionRef.current!=='RIGHT')setDirection('LEFT');break;case'ArrowRight':if(directionRef.current!=='LEFT')setDirection('RIGHT');break;default:break;}};document.addEventListener('keydown',handleKeyPress);const gameInterval=setInterval(moveSnake,calculateSpeed(score));return()=>{document.removeEventListener('keydown',handleKeyPress);clearInterval(gameInterval);};},[moveSnake,gameOver,isPlaying,score,calculateSpeed]);const resetGame=()=>{setSnake(initialSnake);setDirection('RIGHT');setGameOver(false);setScore(0);setIsPlaying(false);generateFood();};const startGame=()=>{if(!isPlaying&&!gameOver){setIsPlaying(true);}};// スコアを保存する関数を先に定義\nconst updateScores=useCallback(async newScore=>{try{// 制限時間モードでは時間切れの時のみスコアを記録\nif(mode==='time'){if(timeLeft>0)return;// 時間が残っている場合は記録しない\nconst collectionName='scorestime';const scoresRef=collection(db,collectionName);const scoreData={score:newScore,date:new Date()};await addDoc(scoresRef,scoreData);return;}// 通常モードと難易度モードの処理\nconst collectionName=getCollectionName(mode,difficulty);const scoresRef=collection(db,collectionName);const scoreData={score:newScore,date:new Date()};await addDoc(scoresRef,scoreData);}catch(error){console.error('Error saving score:',error);}},[mode,difficulty,timeLeft]);// Firestoreのリアルタイムリスナーを設定\nuseEffect(()=>{// コレクション名の設定\nconst collectionName=mode==='time'?'scorestime':getCollectionName(mode,difficulty);const scoresRef=collection(db,collectionName);// クエリの設定\nconst queryConstraints=[orderBy('score','desc'),limit(10)];const q=query(scoresRef,...queryConstraints);// リアルタイムリスナーを設定\nconst unsubscribe=onSnapshot(q,snapshot=>{const scores=snapshot.docs.map(doc=>_objectSpread(_objectSpread({id:doc.id},doc.data()),{},{date:doc.data().date.toDate().toLocaleString()}));// 同点のスコアに同じ順位を付ける\nlet currentRank=1;let prevScore=null;const rankedScores=scores.map(score=>{if(prevScore!==null&&score.score!==prevScore){currentRank=scores.filter(s=>s.score>score.score).length+1;}prevScore=score.score;return _objectSpread(_objectSpread({},score),{},{rank:currentRank});});const topScores=rankedScores.filter(score=>score.rank<=5);setTopScores(topScores);});return()=>unsubscribe();},[mode,difficulty]);// 制限時間の処理\nuseEffect(()=>{if(mode!=='time'||!isPlaying)return;const timer=setInterval(()=>{setTimeLeft(prev=>{if(prev<=0){clearInterval(timer);setIsTimeUp(true);setIsPlaying(false);// スコアの記録は別のuseEffectで行う\nreturn 0;}return prev-1;});},1000);return()=>clearInterval(timer);},[isPlaying,mode]);// 時間切れ時のスコア記録用のuseEffect\nuseEffect(()=>{if(mode==='time'&&timeLeft===0&&!isPlaying&&!gameOver){updateScores(score);}},[mode,timeLeft,isPlaying,gameOver,score,updateScores]);// ゲームオーバー時の処理を修正\nuseEffect(()=>{if(!gameOver)return;if(mode==='time'&&timeLeft>0){// 制限時間モードでは即座に再開\nsetTimeLeft(prev=>Math.max(0,prev-settings.penaltyTime));setGameOver(false);setSnake(initialSnake);setDirection('RIGHT');setIsPlaying(true);generateFood();// 新しい餌を生成\n}},[gameOver,mode,timeLeft,settings,initialSnake]);return/*#__PURE__*/_jsxs(\"div\",{className:\"snake-game\",children:[/*#__PURE__*/_jsx(\"h2\",{children:mode==='time'?'スネークゲーム - 制限時間モード':mode==='difficulty'?\"\\u30B9\\u30CD\\u30FC\\u30AF\\u30B2\\u30FC\\u30E0 - \".concat(settings.label):'スネークゲーム'}),mode==='time'&&/*#__PURE__*/_jsxs(\"div\",{className:\"time-left\",children:[\"\\u6B8B\\u308A\\u6642\\u9593: \",timeLeft,\"\\u79D2\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"score-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"score\",children:[\"\\u73FE\\u5728\\u306E\\u30B9\\u30B3\\u30A2: \",score]}),/*#__PURE__*/_jsxs(\"div\",{className:\"high-score\",children:[\"\\u30CF\\u30A4\\u30B9\\u30B3\\u30A2: \",highScore]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"ranking\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u6B74\\u4EE3\\u30C8\\u30C3\\u30D75\"}),/*#__PURE__*/_jsx(\"div\",{className:\"ranking-list\",children:topScores.map(score=>/*#__PURE__*/_jsxs(\"div\",{className:\"ranking-item\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"rank\",children:[score.rank,\"\\u4F4D\"]}),/*#__PURE__*/_jsxs(\"span\",{className:\"score-value\",children:[score.score,\"\\u70B9\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"score-date\",children:score.date})]},score.id))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:Array.from({length:gridSize},(_,row)=>/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:Array.from({length:gridSize},(_,col)=>{const isSnake=snake.some(segment=>segment[0]===col&&segment[1]===row);const isFood=food[0]===col&&food[1]===row;return/*#__PURE__*/_jsx(\"div\",{className:\"cell \".concat(isSnake?'snake':'',\" \").concat(isFood?'food':'')},\"\".concat(row,\"-\").concat(col));})},row))}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[!isPlaying&&!gameOver&&!isTimeUp&&/*#__PURE__*/_jsx(\"button\",{onClick:startGame,className:\"start-button\",children:\"\\u30B9\\u30BF\\u30FC\\u30C8\"}),isPlaying&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsPlaying(false),className:\"pause-button\",children:\"\\u4E00\\u6642\\u505C\\u6B62\"}),gameOver&&mode!=='time'&&/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,className:\"retry-button\",children:\"\\u3082\\u3046\\u4E00\\u5EA6\\u30D7\\u30EC\\u30A4\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"instructions\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u64CD\\u4F5C\\u65B9\\u6CD5:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"\\u77E2\\u5370\\u30AD\\u30FC\\u3067\\u79FB\\u52D5\"}),/*#__PURE__*/_jsx(\"li\",{children:\"\\u30B9\\u30DA\\u30FC\\u30B9\\u30AD\\u30FC\\u3067\\u958B\\u59CB/\\u4E00\\u6642\\u505C\\u6B62\"})]})]})]});};export default SnakeGame;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","db","collection","addDoc","query","orderBy","limit","getDocs","where","onSnapshot","jsx","_jsx","jsxs","_jsxs","getCollectionName","mode","difficulty","SnakeGame","_ref","settings","onGameOver","gridSize","centerX","Math","floor","centerY","initialSnake","snake","setSnake","food","setFood","direction","setDirection","directionRef","gameOver","setGameOver","score","setScore","isPlaying","setIsPlaying","highScore","setHighScore","saved","localStorage","getItem","parseInt","topScores","setTopScores","timeLeft","setTimeLeft","initialTime","isTimeUp","setIsTimeUp","calculateSpeed","speedIncrease","max","minSpeed","speed","baseSpeed","generateFood","newFood","random","some","segment","current","moveSnake","newSnake","head","unshift","prev","newScore","setItem","toString","pop","handleKeyPress","e","key","code","preventDefault","resetGame","document","addEventListener","gameInterval","setInterval","removeEventListener","clearInterval","startGame","updateScores","collectionName","scoresRef","scoreData","date","Date","error","console","queryConstraints","q","unsubscribe","snapshot","scores","docs","map","doc","_objectSpread","id","data","toDate","toLocaleString","currentRank","prevScore","rankedScores","filter","s","length","rank","timer","penaltyTime","className","children","concat","label","Array","from","_","row","col","isSnake","isFood","onClick"],"sources":["/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\n\nconst SnakeGame = ({ mode = 'normal', difficulty = 'normal', settings = null, onGameOver = null }) => {\n  // グリッドの中央を計算\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n  \n  // 中央から右向きに3マス分の初期位置を設定\n  const initialSnake = [\n    [centerX, centerY],     // 頭\n    [centerX - 1, centerY], // 胴体\n    [centerX - 2, centerY]  // 尾\n  ];\n\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n\n  const calculateSpeed = useCallback((score) => {\n    if (mode === 'difficulty' && settings) {\n      const speedIncrease = Math.floor(score / 5) * settings.speedIncrease;\n      return Math.max(settings.minSpeed, settings.speed - speedIncrease);\n    }\n    // 通常モードのデフォルト速度計算\n    const baseSpeed = 200;\n    const speedIncrease = Math.floor(score / 5) * 10;\n    return Math.max(60, baseSpeed - speedIncrease);\n  }, [mode, settings]);\n\n  const generateFood = useCallback(() => {\n    let newFood;\n    do {\n      newFood = [\n        Math.floor(Math.random() * gridSize),\n        Math.floor(Math.random() * gridSize),\n      ];\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]));\n    setFood(newFood);\n  }, [snake]);\n\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n\n  const moveSnake = useCallback(() => {\n    if (gameOver || !isPlaying) return;\n\n    const newSnake = [...snake];\n    const head = [...newSnake[0]];\n\n    switch (directionRef.current) {\n      case 'UP':\n        head[1] -= 1;\n        break;\n      case 'DOWN':\n        head[1] += 1;\n        break;\n      case 'LEFT':\n        head[0] -= 1;\n        break;\n      case 'RIGHT':\n        head[0] += 1;\n        break;\n      default:\n        break;\n    }\n\n    if (\n      head[0] < 0 ||\n      head[0] >= gridSize ||\n      head[1] < 0 ||\n      head[1] >= gridSize\n    ) {\n      setGameOver(true);\n      return;\n    }\n\n    if (newSnake.some(segment => segment[0] === head[0] && segment[1] === head[1])) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.unshift(head);\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      setScore(prev => {\n        const newScore = prev + 1;\n        if (newScore > highScore) {\n          setHighScore(newScore);\n          localStorage.setItem('snakeHighScore', newScore.toString());\n        }\n        return newScore;\n      });\n      generateFood();\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n  }, [snake, food, gameOver, generateFood, highScore, isPlaying]);\n\n  useEffect(() => {\n    if (!isPlaying && !gameOver) {\n      generateFood();\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (e.key === 'ArrowUp' || \n          e.key === 'ArrowDown' || \n          e.key === 'ArrowLeft' || \n          e.key === 'ArrowRight' || \n          e.code === 'Space') {\n        e.preventDefault();\n      }\n\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n\n      if (!isPlaying) return;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed]);\n\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    generateFood();\n  };\n\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を先に定義\n  const updateScores = useCallback(async (newScore) => {\n    try {\n      // 制限時間モードでは時間切れの時のみスコアを記録\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        const collectionName = 'scorestime';\n        const scoresRef = collection(db, collectionName);\n        const scoreData = {\n          score: newScore,\n          date: new Date()\n        };\n        await addDoc(scoresRef, scoreData);\n        return;\n      }\n\n      // 通常モードと難易度モードの処理\n      const collectionName = getCollectionName(mode, difficulty);\n      const scoresRef = collection(db, collectionName);\n      \n      const scoreData = {\n        score: newScore,\n        date: new Date()\n      };\n\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    // コレクション名の設定\n    const collectionName = mode === 'time' ? 'scorestime' : getCollectionName(mode, difficulty);\n    const scoresRef = collection(db, collectionName);\n    \n    // クエリの設定\n    const queryConstraints = [\n      orderBy('score', 'desc'),\n      limit(10)\n    ];\n\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString()\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n\n      const rankedScores = scores.map((score) => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n\n    if (mode === 'time' && timeLeft > 0) {\n      // 制限時間モードでは即座に再開\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      generateFood(); // 新しい餌を生成\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake]);\n\n  return (\n    <div className=\"snake-game\">\n      <h2>\n        {mode === 'time' ? 'スネークゲーム - 制限時間モード' : \n         mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : \n         'スネークゲーム'}\n      </h2>\n      {mode === 'time' && (\n        <div className=\"time-left\">残り時間: {timeLeft}秒</div>\n      )}\n      <div className=\"score-container\">\n        <div className=\"score\">現在のスコア: {score}</div>\n        <div className=\"high-score\">ハイスコア: {highScore}</div>\n      </div>\n      <div className=\"ranking\">\n        <h3>歴代トップ5</h3>\n        <div className=\"ranking-list\">\n          {topScores.map((score) => (\n            <div key={score.id} className=\"ranking-item\">\n              <span className=\"rank\">{score.rank}位</span>\n              <span className=\"score-value\">{score.score}点</span>\n              <span className=\"score-date\">{score.date}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"game-board\">\n        {Array.from({ length: gridSize }, (_, row) => (\n          <div key={row} className=\"row\">\n            {Array.from({ length: gridSize }, (_, col) => {\n              const isSnake = snake.some(\n                segment => segment[0] === col && segment[1] === row\n              );\n              const isFood = food[0] === col && food[1] === row;\n              return (\n                <div\n                  key={`${row}-${col}`}\n                  className={`cell ${isSnake ? 'snake' : ''} ${\n                    isFood ? 'food' : ''\n                  }`}\n                />\n              );\n            })}\n          </div>\n        ))}\n      </div>\n      <div className=\"controls\">\n        {!isPlaying && !gameOver && !isTimeUp && (\n          <button onClick={startGame} className=\"start-button\">\n            スタート\n          </button>\n        )}\n        {isPlaying && (\n          <button onClick={() => setIsPlaying(false)} className=\"pause-button\">\n            一時停止\n          </button>\n        )}\n        {(gameOver && mode !== 'time') && (\n          <button onClick={resetGame} className=\"retry-button\">\n            もう一度プレイ\n          </button>\n        )}\n      </div>\n      <div className=\"instructions\">\n        <p>操作方法:</p>\n        <ul>\n          <li>矢印キーで移動</li>\n          <li>スペースキーで開始/一時停止</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default SnakeGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}