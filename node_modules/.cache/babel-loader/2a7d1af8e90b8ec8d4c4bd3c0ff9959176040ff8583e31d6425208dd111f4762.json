{"ast":null,"code":"var _jsxFileName = \"/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\nconst SnakeGame = ({\n  mode = 'normal',\n  difficulty = 'normal',\n  settings = null,\n  onGameOver = null\n}) => {\n  _s();\n  // グリッドの中央を計算\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n\n  // 中央から右向きに3マス分の初期位置を設定\n  const initialSnake = [[centerX, centerY],\n  // 頭\n  [centerX - 1, centerY],\n  // 胴体\n  [centerX - 2, centerY] // 尾\n  ];\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n\n  // 特殊エサの状態を管理\n  const [specialFood, setSpecialFood] = useState(null); // { type: 'yellow' | 'blue' | 'black', position: [x, y] }\n  const [specialFoodTimer, setSpecialFoodTimer] = useState(null);\n  const calculateSpeed = useCallback(score => {\n    if (mode === 'difficulty' && settings) {\n      const speedIncrease = Math.floor(score / 5) * settings.speedIncrease;\n      return Math.max(settings.minSpeed, settings.speed - speedIncrease);\n    }\n    // 通常モードのデフォルト速度計算\n    const baseSpeed = 200;\n    const speedIncrease = Math.floor(score / 5) * 10;\n    return Math.max(60, baseSpeed - speedIncrease);\n  }, [mode, settings]);\n  const generateFood = useCallback(() => {\n    const newFoodPosition = () => {\n      return [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n    };\n    let newFood;\n    do {\n      newFood = newFoodPosition();\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]));\n    setFood(newFood);\n  }, [snake, gridSize]);\n\n  // 特殊エサの生成\n  const generateSpecialFood = useCallback(() => {\n    if (mode !== 'time' || !isPlaying) return;\n    const types = ['yellow', 'blue', 'black'];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    const newFoodPosition = () => {\n      return [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n    };\n    let newFood;\n    do {\n      newFood = newFoodPosition();\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]) || food[0] === newFood[0] && food[1] === newFood[1]);\n    setSpecialFood({\n      type: randomType,\n      position: newFood\n    });\n\n    // 5秒後に特殊エサを消す\n    const timer = setTimeout(() => {\n      setSpecialFood(null);\n    }, 5000);\n    setSpecialFoodTimer(timer);\n    return () => clearTimeout(timer);\n  }, [snake, food, gridSize, mode, isPlaying]);\n\n  // ランダムな間隔で特殊エサを生成\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n    const interval = setInterval(() => {\n      if (!specialFood) {\n        generateSpecialFood();\n      }\n    }, Math.random() * 5000 + 5000); // 5-10秒のランダムな間隔\n\n    return () => clearInterval(interval);\n  }, [mode, isPlaying, specialFood, generateSpecialFood]);\n\n  // 特殊エサの効果を処理\n  const handleSpecialFoodEffect = useCallback(type => {\n    switch (type) {\n      case 'yellow':\n        setScore(prev => prev + 3);\n        break;\n      case 'blue':\n        setTimeLeft(prev => prev + 5);\n        break;\n      case 'black':\n        // ヘビの長さを5増やす\n        setSnake(prev => {\n          const tail = prev[prev.length - 1];\n          const newSegments = Array(5).fill(tail);\n          return [...prev, ...newSegments];\n        });\n        break;\n      default:\n        break;\n    }\n  }, []);\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n  const moveSnake = useCallback(() => {\n    if (!isPlaying || gameOver) return;\n    setSnake(prevSnake => {\n      const head = [...prevSnake[0]];\n      switch (directionRef.current) {\n        case 'UP':\n          head[1] -= 1;\n          break;\n        case 'DOWN':\n          head[1] += 1;\n          break;\n        case 'LEFT':\n          head[0] -= 1;\n          break;\n        case 'RIGHT':\n          head[0] += 1;\n          break;\n        default:\n          break;\n      }\n\n      // 壁やヘビ自身との衝突判定\n      if (head[0] < 0 || head[0] >= gridSize || head[1] < 0 || head[1] >= gridSize || prevSnake.some(segment => segment[0] === head[0] && segment[1] === head[1])) {\n        setGameOver(true);\n        setIsPlaying(false);\n        return prevSnake;\n      }\n      const newSnake = [head];\n\n      // 通常のエサとの衝突判定\n      if (head[0] === food[0] && head[1] === food[1]) {\n        setScore(prev => prev + 1);\n        generateFood();\n        newSnake.push(...prevSnake);\n      } else {\n        newSnake.push(...prevSnake.slice(0, -1));\n      }\n\n      // 特殊エサとの衝突判定\n      if (specialFood && head[0] === specialFood.position[0] && head[1] === specialFood.position[1]) {\n        handleSpecialFoodEffect(specialFood.type);\n        clearTimeout(specialFoodTimer);\n        setSpecialFood(null);\n      }\n      return newSnake;\n    });\n  }, [isPlaying, gameOver, food, generateFood, gridSize, specialFood, specialFoodTimer, handleSpecialFoodEffect]);\n  useEffect(() => {\n    if (!isPlaying && !gameOver) {\n      generateFood();\n    }\n  }, [isPlaying, gameOver, generateFood]);\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {\n        e.preventDefault();\n      }\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n      if (!isPlaying) return;\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed, resetGame]);\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    generateFood();\n  };\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を修正\n  const updateScores = useCallback(async newScore => {\n    try {\n      let collectionName;\n\n      // モードに応じたコレクション名を設定\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        collectionName = 'scorestime';\n      } else if (mode === 'difficulty') {\n        collectionName = getCollectionName(mode, difficulty);\n      } else {\n        collectionName = 'scores'; // 通常モード\n      }\n      const scoresRef = collection(db, collectionName);\n      const scoreData = {\n        score: newScore,\n        date: new Date()\n      };\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    // コレクション名の設定\n    const collectionName = mode === 'time' ? 'scorestime' : getCollectionName(mode, difficulty);\n    const scoresRef = collection(db, collectionName);\n\n    // クエリの設定\n    const queryConstraints = [orderBy('score', 'desc'), limit(10)];\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, snapshot => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString()\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n      const rankedScores = scores.map(score => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n    if (mode === 'time' && timeLeft > 0) {\n      // 制限時間モードでは即座に再開\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      generateFood(); // 新しい餌を生成\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake, generateFood]);\n\n  // ゲームオーバー時のスコア更新を追加\n  useEffect(() => {\n    if (gameOver && score > 0 && mode !== 'time') {\n      updateScores(score);\n    }\n  }, [gameOver, score, mode, updateScores]);\n\n  // ハイスコアの更新処理を追加\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n      localStorage.setItem('snakeHighScore', score.toString());\n    }\n  }, [score, highScore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: mode === 'time' ? 'スネークゲーム - 制限時間モード' : mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : 'スネークゲーム'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), mode === 'time' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-left\",\n      children: [\"\\u6B8B\\u308A\\u6642\\u9593: \", timeLeft, \"\\u79D2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"\\u73FE\\u5728\\u306E\\u30B9\\u30B3\\u30A2: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"high-score\",\n        children: [\"\\u30CF\\u30A4\\u30B9\\u30B3\\u30A2: \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: Array.from({\n        length: gridSize\n      }, (_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: Array.from({\n          length: gridSize\n        }, (_, col) => {\n          const isSnake = snake.some(segment => segment[0] === col && segment[1] === row);\n          const isFood = food[0] === col && food[1] === row;\n          const isSpecialFood = specialFood && specialFood.position[0] === col && specialFood.position[1] === row;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell \n                    ${isSnake ? 'snake' : ''} \n                    ${isFood ? 'food' : ''} \n                    ${isSpecialFood ? `special-food-${specialFood.type}` : ''}`\n          }, `${row}-${col}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 17\n          }, this);\n        })\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [!isPlaying && !gameOver && !isTimeUp && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        className: \"start-button\",\n        children: \"\\u30B9\\u30BF\\u30FC\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this), isPlaying && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsPlaying(false),\n        className: \"pause-button\",\n        children: \"\\u4E00\\u6642\\u505C\\u6B62\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), gameOver && mode !== 'time' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"retry-button\",\n        children: \"\\u3082\\u3046\\u4E00\\u5EA6\\u30D7\\u30EC\\u30A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ranking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6B74\\u4EE3\\u30C8\\u30C3\\u30D75\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ranking-list\",\n        children: topScores.map(score => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ranking-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"rank\",\n            children: [score.rank, \"\\u4F4D\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-value\",\n            children: [score.score, \"\\u70B9\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-date\",\n            children: score.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this)]\n        }, score.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"nhkxBb1us2nJaILkiC/U70Eoiis=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","db","collection","addDoc","query","orderBy","limit","getDocs","where","onSnapshot","jsxDEV","_jsxDEV","getCollectionName","mode","difficulty","SnakeGame","settings","onGameOver","_s","gridSize","centerX","Math","floor","centerY","initialSnake","snake","setSnake","food","setFood","direction","setDirection","directionRef","gameOver","setGameOver","score","setScore","isPlaying","setIsPlaying","highScore","setHighScore","saved","localStorage","getItem","parseInt","topScores","setTopScores","timeLeft","setTimeLeft","initialTime","isTimeUp","setIsTimeUp","specialFood","setSpecialFood","specialFoodTimer","setSpecialFoodTimer","calculateSpeed","speedIncrease","max","minSpeed","speed","baseSpeed","generateFood","newFoodPosition","random","newFood","some","segment","generateSpecialFood","types","randomType","length","type","position","timer","setTimeout","clearTimeout","interval","setInterval","clearInterval","handleSpecialFoodEffect","prev","tail","newSegments","Array","fill","current","moveSnake","prevSnake","head","newSnake","push","slice","handleKeyPress","e","key","code","preventDefault","resetGame","document","addEventListener","gameInterval","removeEventListener","startGame","updateScores","newScore","collectionName","scoresRef","scoreData","date","Date","error","console","queryConstraints","q","unsubscribe","snapshot","scores","docs","map","doc","id","data","toDate","toLocaleString","currentRank","prevScore","rankedScores","filter","s","rank","penaltyTime","setItem","toString","className","children","label","fileName","_jsxFileName","lineNumber","columnNumber","from","_","row","col","isSnake","isFood","isSpecialFood","onClick","_c","$RefreshReg$"],"sources":["/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\n\nconst SnakeGame = ({ mode = 'normal', difficulty = 'normal', settings = null, onGameOver = null }) => {\n  // グリッドの中央を計算\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n  \n  // 中央から右向きに3マス分の初期位置を設定\n  const initialSnake = [\n    [centerX, centerY],     // 頭\n    [centerX - 1, centerY], // 胴体\n    [centerX - 2, centerY]  // 尾\n  ];\n\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n\n  // 特殊エサの状態を管理\n  const [specialFood, setSpecialFood] = useState(null); // { type: 'yellow' | 'blue' | 'black', position: [x, y] }\n  const [specialFoodTimer, setSpecialFoodTimer] = useState(null);\n\n  const calculateSpeed = useCallback((score) => {\n    if (mode === 'difficulty' && settings) {\n      const speedIncrease = Math.floor(score / 5) * settings.speedIncrease;\n      return Math.max(settings.minSpeed, settings.speed - speedIncrease);\n    }\n    // 通常モードのデフォルト速度計算\n    const baseSpeed = 200;\n    const speedIncrease = Math.floor(score / 5) * 10;\n    return Math.max(60, baseSpeed - speedIncrease);\n  }, [mode, settings]);\n\n  const generateFood = useCallback(() => {\n    const newFoodPosition = () => {\n      return [\n        Math.floor(Math.random() * gridSize),\n        Math.floor(Math.random() * gridSize),\n      ];\n    };\n\n    let newFood;\n    do {\n      newFood = newFoodPosition();\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]));\n    setFood(newFood);\n  }, [snake, gridSize]);\n\n  // 特殊エサの生成\n  const generateSpecialFood = useCallback(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    const types = ['yellow', 'blue', 'black'];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    \n    const newFoodPosition = () => {\n      return [\n        Math.floor(Math.random() * gridSize),\n        Math.floor(Math.random() * gridSize),\n      ];\n    };\n\n    let newFood;\n    do {\n      newFood = newFoodPosition();\n    } while (\n      snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]) ||\n      (food[0] === newFood[0] && food[1] === newFood[1])\n    );\n\n    setSpecialFood({ type: randomType, position: newFood });\n\n    // 5秒後に特殊エサを消す\n    const timer = setTimeout(() => {\n      setSpecialFood(null);\n    }, 5000);\n    setSpecialFoodTimer(timer);\n\n    return () => clearTimeout(timer);\n  }, [snake, food, gridSize, mode, isPlaying]);\n\n  // ランダムな間隔で特殊エサを生成\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    const interval = setInterval(() => {\n      if (!specialFood) {\n        generateSpecialFood();\n      }\n    }, Math.random() * 5000 + 5000); // 5-10秒のランダムな間隔\n\n    return () => clearInterval(interval);\n  }, [mode, isPlaying, specialFood, generateSpecialFood]);\n\n  // 特殊エサの効果を処理\n  const handleSpecialFoodEffect = useCallback((type) => {\n    switch (type) {\n      case 'yellow':\n        setScore(prev => prev + 3);\n        break;\n      case 'blue':\n        setTimeLeft(prev => prev + 5);\n        break;\n      case 'black':\n        // ヘビの長さを5増やす\n        setSnake(prev => {\n          const tail = prev[prev.length - 1];\n          const newSegments = Array(5).fill(tail);\n          return [...prev, ...newSegments];\n        });\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n\n  const moveSnake = useCallback(() => {\n    if (!isPlaying || gameOver) return;\n\n    setSnake(prevSnake => {\n      const head = [...prevSnake[0]];\n      \n      switch (directionRef.current) {\n        case 'UP':\n          head[1] -= 1;\n          break;\n        case 'DOWN':\n          head[1] += 1;\n          break;\n        case 'LEFT':\n          head[0] -= 1;\n          break;\n        case 'RIGHT':\n          head[0] += 1;\n          break;\n        default:\n          break;\n      }\n\n      // 壁やヘビ自身との衝突判定\n      if (\n        head[0] < 0 ||\n        head[0] >= gridSize ||\n        head[1] < 0 ||\n        head[1] >= gridSize ||\n        prevSnake.some(segment => segment[0] === head[0] && segment[1] === head[1])\n      ) {\n        setGameOver(true);\n        setIsPlaying(false);\n        return prevSnake;\n      }\n\n      const newSnake = [head];\n\n      // 通常のエサとの衝突判定\n      if (head[0] === food[0] && head[1] === food[1]) {\n        setScore(prev => prev + 1);\n        generateFood();\n        newSnake.push(...prevSnake);\n      } else {\n        newSnake.push(...prevSnake.slice(0, -1));\n      }\n\n      // 特殊エサとの衝突判定\n      if (specialFood && head[0] === specialFood.position[0] && head[1] === specialFood.position[1]) {\n        handleSpecialFoodEffect(specialFood.type);\n        clearTimeout(specialFoodTimer);\n        setSpecialFood(null);\n      }\n\n      return newSnake;\n    });\n  }, [isPlaying, gameOver, food, generateFood, gridSize, specialFood, specialFoodTimer, handleSpecialFoodEffect]);\n\n  useEffect(() => {\n    if (!isPlaying && !gameOver) {\n      generateFood();\n    }\n  }, [isPlaying, gameOver, generateFood]);\n\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (e.key === 'ArrowUp' || \n          e.key === 'ArrowDown' || \n          e.key === 'ArrowLeft' || \n          e.key === 'ArrowRight' || \n          e.code === 'Space') {\n        e.preventDefault();\n      }\n\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n\n      if (!isPlaying) return;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed, resetGame]);\n\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    generateFood();\n  };\n\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を修正\n  const updateScores = useCallback(async (newScore) => {\n    try {\n      let collectionName;\n      \n      // モードに応じたコレクション名を設定\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        collectionName = 'scorestime';\n      } else if (mode === 'difficulty') {\n        collectionName = getCollectionName(mode, difficulty);\n      } else {\n        collectionName = 'scores'; // 通常モード\n      }\n\n      const scoresRef = collection(db, collectionName);\n      const scoreData = {\n        score: newScore,\n        date: new Date()\n      };\n\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    // コレクション名の設定\n    const collectionName = mode === 'time' ? 'scorestime' : getCollectionName(mode, difficulty);\n    const scoresRef = collection(db, collectionName);\n    \n    // クエリの設定\n    const queryConstraints = [\n      orderBy('score', 'desc'),\n      limit(10)\n    ];\n\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString()\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n\n      const rankedScores = scores.map((score) => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n\n    if (mode === 'time' && timeLeft > 0) {\n      // 制限時間モードでは即座に再開\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      generateFood(); // 新しい餌を生成\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake, generateFood]);\n\n  // ゲームオーバー時のスコア更新を追加\n  useEffect(() => {\n    if (gameOver && score > 0 && mode !== 'time') {\n      updateScores(score);\n    }\n  }, [gameOver, score, mode, updateScores]);\n\n  // ハイスコアの更新処理を追加\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n      localStorage.setItem('snakeHighScore', score.toString());\n    }\n  }, [score, highScore]);\n\n  return (\n    <div className=\"snake-game\">\n      <h2>\n        {mode === 'time' ? 'スネークゲーム - 制限時間モード' : \n         mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : \n         'スネークゲーム'}\n      </h2>\n      {mode === 'time' && (\n        <div className=\"time-left\">残り時間: {timeLeft}秒</div>\n      )}\n      <div className=\"score-container\">\n        <div className=\"score\">現在のスコア: {score}</div>\n        <div className=\"high-score\">ハイスコア: {highScore}</div>\n      </div>\n      <div className=\"game-board\">\n        {Array.from({ length: gridSize }, (_, row) => (\n          <div key={row} className=\"row\">\n            {Array.from({ length: gridSize }, (_, col) => {\n              const isSnake = snake.some(\n                segment => segment[0] === col && segment[1] === row\n              );\n              const isFood = food[0] === col && food[1] === row;\n              const isSpecialFood = specialFood && \n                specialFood.position[0] === col && \n                specialFood.position[1] === row;\n              \n              return (\n                <div\n                  key={`${row}-${col}`}\n                  className={`cell \n                    ${isSnake ? 'snake' : ''} \n                    ${isFood ? 'food' : ''} \n                    ${isSpecialFood ? `special-food-${specialFood.type}` : ''}`\n                  }\n                />\n              );\n            })}\n          </div>\n        ))}\n      </div>\n      <div className=\"controls\">\n        {!isPlaying && !gameOver && !isTimeUp && (\n          <button onClick={startGame} className=\"start-button\">\n            スタート\n          </button>\n        )}\n        {isPlaying && (\n          <button onClick={() => setIsPlaying(false)} className=\"pause-button\">\n            一時停止\n          </button>\n        )}\n        {(gameOver && mode !== 'time') && (\n          <button onClick={resetGame} className=\"retry-button\">\n            もう一度プレイ\n          </button>\n        )}\n      </div>\n      <div className=\"ranking\">\n        <h3>歴代トップ5</h3>\n        <div className=\"ranking-list\">\n          {topScores.map((score) => (\n            <div key={score.id} className=\"ranking-item\">\n              <span className=\"rank\">{score.rank}位</span>\n              <span className=\"score-value\">{score.score}点</span>\n              <span className=\"score-date\">{score.date}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SnakeGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}