{"ast":null,"code":"import _objectSpread from\"/Users/zuuki/Desktop/Web/snake-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback,useRef}from'react';import{db}from'../firebase';import{collection,addDoc,query,orderBy,limit,getDocs,where,onSnapshot}from'firebase/firestore';import'../styles/SnakeGame.css';// コレクション名を取得する関数を追加\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const getCollectionName=(mode,difficulty)=>{if(mode==='difficulty'){switch(difficulty){case'beginner':return'scoreslow';case'intermediate':return'scoresmiddle';case'advanced':return'scoreshigh';default:return'scores';}}return'scores';};const SnakeGame=_ref=>{let{mode='normal',difficulty='normal',settings=null,onGameOver=null}=_ref;const gridSize=20;const centerX=Math.floor(gridSize/2);const centerY=Math.floor(gridSize/2);// initialSnakeをuseMemoで最適化\nconst initialSnake=React.useMemo(()=>[[centerX,centerY],// 頭\n[centerX-1,centerY],// 胴体\n[centerX-2,centerY]// 尾\n],[centerX,centerY]);const[snake,setSnake]=useState(initialSnake);const[food,setFood]=useState([0,0]);const[specialFood,setSpecialFood]=useState(null);// { type: 'yellow' | 'blue' | 'black', position: [x, y] }\nconst[direction,setDirection]=useState('RIGHT');const directionRef=useRef(direction);const[gameOver,setGameOver]=useState(false);const[score,setScore]=useState(0);const[isPlaying,setIsPlaying]=useState(false);const[highScore,setHighScore]=useState(()=>{const saved=localStorage.getItem('snakeHighScore');return saved?parseInt(saved):0;});const[topScores,setTopScores]=useState([]);const[timeLeft,setTimeLeft]=useState(mode==='time'?settings.initialTime:null);const[isTimeUp,setIsTimeUp]=useState(false);// checkCollision関数を先に定義\nconst checkCollision=useCallback(head=>{return head[0]<0||head[0]>=gridSize||head[1]<0||head[1]>=gridSize||snake.some(segment=>segment[0]===head[0]&&segment[1]===head[1]);},[snake,gridSize]);const calculateSpeed=useCallback(score=>{let speed=200-Math.floor(score/5)*10;return Math.max(60,speed);},[]);// generateFoodを先に定義\nconst generateFood=useCallback(()=>{const getRandomPosition=()=>[Math.floor(Math.random()*gridSize),Math.floor(Math.random()*gridSize)];const isPositionOccupied=pos=>snake.some(segment=>segment[0]===pos[0]&&segment[1]===pos[1]);let newFood;do{newFood=getRandomPosition();}while(isPositionOccupied(newFood));setFood(newFood);},[snake,gridSize]);// 特殊エサの生成関数\nconst generateSpecialFood=useCallback(()=>{if(mode!=='time'||!isPlaying)return;// 既に特殊エサがある場合は生成しない\nif(specialFood)return;const types=['yellow','blue','black'];const randomType=types[Math.floor(Math.random()*types.length)];const getRandomPosition=()=>[Math.floor(Math.random()*gridSize),Math.floor(Math.random()*gridSize)];// 既存のヘビ、通常エサとの衝突チェック\nconst isPositionOccupied=pos=>snake.some(segment=>segment[0]===pos[0]&&segment[1]===pos[1])||food[0]===pos[0]&&food[1]===pos[1];let newFood;do{newFood=getRandomPosition();}while(isPositionOccupied(newFood));setSpecialFood({type:randomType,position:newFood});// 5秒後に特殊エサを消す\nconst timer=setTimeout(()=>{setSpecialFood(null);},5000);return()=>clearTimeout(timer);},[snake,food,gridSize,mode,isPlaying,specialFood]);// 特殊エサの効果を処理\nconst handleSpecialFoodEffect=useCallback(type=>{switch(type){case'yellow':setScore(s=>s+3);// 黄色は3点追加\nbreak;case'blue':setTimeLeft(prev=>prev+5);// 青は時間5秒追加\nbreak;case'black':setSnake(prev=>{// 黒はヘビの長さを5増やす\nconst tail=prev[prev.length-1];const newSegments=Array(5).fill(tail);return[...prev,...newSegments];});break;default:break;}},[]);// resetGameの定義\nconst resetGame=useCallback(()=>{setSnake(initialSnake);setDirection('RIGHT');setGameOver(false);setScore(0);setIsPlaying(false);setFood([0,0]);// エサを初期位置に戻す（次回開始時に新しい位置が生成される）\n},[initialSnake]);useEffect(()=>{directionRef.current=direction;},[direction]);const moveSnake=useCallback(()=>{if(!isPlaying||gameOver)return;setSnake(prevSnake=>{const head=[...prevSnake[0]];switch(directionRef.current){case'UP':head[1]-=1;break;case'DOWN':head[1]+=1;break;case'LEFT':head[0]-=1;break;case'RIGHT':head[0]+=1;break;default:break;}// 壁やヘビ自身との衝突判定\nif(checkCollision(head)){setGameOver(true);setIsPlaying(false);return prevSnake;}const newSnake=[head];// 通常のエサとの衝突判定\nif(head[0]===food[0]&&head[1]===food[1]){setScore(s=>s+1);generateFood();newSnake.push(...prevSnake);}else{newSnake.push(...prevSnake.slice(0,-1));}// 特殊エサとの衝突判定を追加\nif(specialFood&&head[0]===specialFood.position[0]&&head[1]===specialFood.position[1]){handleSpecialFoodEffect(specialFood.type);setSpecialFood(null);}return newSnake;});},[isPlaying,gameOver,food,generateFood,gridSize,specialFood,handleSpecialFoodEffect,checkCollision]);// エサの生成を管理するuseEffect\nuseEffect(()=>{// エサが初期位置[0,0]の時のみ生成\nif(food[0]===0&&food[1]===0){generateFood();}},[generateFood,food]);// 特殊エサの生成タイマー\nuseEffect(()=>{if(mode!=='time'||!isPlaying){setSpecialFood(null);// プレイ中でない場合は特殊エサを消す\nreturn;}// 10秒ごとに特殊エサを生成\nconst interval=setInterval(()=>{generateSpecialFood();},10000);// 10秒間隔\nreturn()=>{clearInterval(interval);};},[mode,isPlaying,generateSpecialFood]);// キーボード入力の処理を修正\nuseEffect(()=>{const handleKeyPress=e=>{if(e.key==='ArrowUp'||e.key==='ArrowDown'||e.key==='ArrowLeft'||e.key==='ArrowRight'||e.code==='Space'||e.key==='1'||e.key==='2'){e.preventDefault();}if(!isPlaying)return;// アイテムの使用（1キーで1つ目、2キーで2つ目のアイテム）\nif(e.key==='1'&&activeItems[0]&&!activeItems[0].isActive){handleItemEffect(activeItems[0].id);}if(e.key==='2'&&activeItems[1]&&!activeItems[1].isActive){handleItemEffect(activeItems[1].id);}// アイテム効果の適用\nif(e.code==='Space'){if(gameOver){resetGame();}else{setIsPlaying(prev=>!prev);}return;}switch(e.key){case'ArrowUp':if(directionRef.current!=='DOWN')setDirection('UP');break;case'ArrowDown':if(directionRef.current!=='UP')setDirection('DOWN');break;case'ArrowLeft':if(directionRef.current!=='RIGHT')setDirection('LEFT');break;case'ArrowRight':if(directionRef.current!=='LEFT')setDirection('RIGHT');break;default:break;}};document.addEventListener('keydown',handleKeyPress);const gameInterval=setInterval(moveSnake,calculateSpeed(score));return()=>{document.removeEventListener('keydown',handleKeyPress);clearInterval(gameInterval);};},[moveSnake,gameOver,isPlaying,score,calculateSpeed,resetGame]);const startGame=()=>{if(!isPlaying&&!gameOver){if(food[0]===0&&food[1]===0){generateFood();// エサが初期位置の場合のみ生成\n}setIsPlaying(true);}};// スコアを保存する関数を修正\nconst updateScores=useCallback(async newScore=>{try{let collectionName;// モードに応じたコレクション名を設定\nif(mode==='time'){if(timeLeft>0)return;// 時間が残っている場合は記録しない\ncollectionName='scorestime';}else if(mode==='difficulty'){collectionName=getCollectionName(mode,difficulty);}else{collectionName='scores';// 通常モード\n}const scoresRef=collection(db,collectionName);const scoreData={score:newScore,date:new Date()};await addDoc(scoresRef,scoreData);}catch(error){console.error('Error saving score:',error);}},[mode,difficulty,timeLeft]);// Firestoreのリアルタイムリスナーを設定\nuseEffect(()=>{let collectionName;// コレクション名の設定\nif(mode==='time'){collectionName='scorestime';}else if(mode==='difficulty'){collectionName=getCollectionName(mode,difficulty);}else{collectionName='scores';}const scoresRef=collection(db,collectionName);// クエリの設定\nconst queryConstraints=[orderBy('score','desc'),limit(10)];const q=query(scoresRef,...queryConstraints);// リアルタイムリスナーを設定\nconst unsubscribe=onSnapshot(q,snapshot=>{const scores=snapshot.docs.map(doc=>_objectSpread(_objectSpread({id:doc.id},doc.data()),{},{date:doc.data().date.toDate().toLocaleString()}));// 同点のスコアに同じ順位を付ける\nlet currentRank=1;let prevScore=null;const rankedScores=scores.map(score=>{if(prevScore!==null&&score.score!==prevScore){currentRank=scores.filter(s=>s.score>score.score).length+1;}prevScore=score.score;return _objectSpread(_objectSpread({},score),{},{rank:currentRank});});const topScores=rankedScores.filter(score=>score.rank<=5);setTopScores(topScores);});return()=>unsubscribe();},[mode,difficulty]);// 制限時間の処理\nuseEffect(()=>{if(mode!=='time'||!isPlaying)return;const timer=setInterval(()=>{setTimeLeft(prev=>{if(prev<=0){clearInterval(timer);setIsTimeUp(true);setIsPlaying(false);// スコアの記録は別のuseEffectで行う\nreturn 0;}return prev-1;});},1000);return()=>clearInterval(timer);},[isPlaying,mode]);// 時間切れ時のスコア記録用のuseEffect\nuseEffect(()=>{if(mode==='time'&&timeLeft===0&&!isPlaying&&!gameOver){updateScores(score);}},[mode,timeLeft,isPlaying,gameOver,score,updateScores]);// ゲームオーバー時の処理を修正\nuseEffect(()=>{if(!gameOver)return;if(mode==='time'&&timeLeft>0){// 制限時間モードでは即座に再開\nsetTimeLeft(prev=>Math.max(0,prev-settings.penaltyTime));setGameOver(false);setSnake(initialSnake);setDirection('RIGHT');setIsPlaying(true);generateFood();// 新しい餌を生成\n}},[gameOver,mode,timeLeft,settings,initialSnake,generateFood]);// ゲームオーバー時のスコア更新を追加\nuseEffect(()=>{if(gameOver&&score>0&&mode!=='time'){updateScores(score);}},[gameOver,score,mode,updateScores]);// ハイスコアの更新処理を追加\nuseEffect(()=>{if(score>highScore){setHighScore(score);localStorage.setItem('snakeHighScore',score.toString());}},[score,highScore]);return/*#__PURE__*/_jsxs(\"div\",{className:\"snake-game\",children:[/*#__PURE__*/_jsx(\"h2\",{children:mode==='time'?'スネークゲーム - 制限時間モード':mode==='difficulty'?\"\\u30B9\\u30CD\\u30FC\\u30AF\\u30B2\\u30FC\\u30E0 - \".concat(settings.label):'スネークゲーム'}),mode==='time'&&/*#__PURE__*/_jsxs(\"div\",{className:\"time-left\",children:[\"\\u6B8B\\u308A\\u6642\\u9593: \",timeLeft,\"\\u79D2\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"score-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"score\",children:[\"\\u73FE\\u5728\\u306E\\u30B9\\u30B3\\u30A2: \",score]}),/*#__PURE__*/_jsxs(\"div\",{className:\"high-score\",children:[\"\\u30CF\\u30A4\\u30B9\\u30B3\\u30A2: \",highScore]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:Array.from({length:gridSize},(_,row)=>/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:Array.from({length:gridSize},(_,col)=>{const isSnake=snake.some(segment=>segment[0]===col&&segment[1]===row);const isFood=food[0]===col&&food[1]===row;const isSpecialFood=specialFood&&specialFood.position[0]===col&&specialFood.position[1]===row;let cellClass='cell';if(isSnake)cellClass+=' snake';if(isFood)cellClass+=' food';if(isSpecialFood)cellClass+=\" special-food-\".concat(specialFood.type);return/*#__PURE__*/_jsx(\"div\",{className:cellClass},\"\".concat(row,\"-\").concat(col));})},row))}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[!isPlaying&&!gameOver&&!isTimeUp&&/*#__PURE__*/_jsx(\"button\",{onClick:startGame,className:\"start-button\",children:\"\\u30B9\\u30BF\\u30FC\\u30C8\"}),isPlaying&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsPlaying(false),className:\"pause-button\",children:\"\\u4E00\\u6642\\u505C\\u6B62\"}),gameOver&&mode!=='time'&&/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,className:\"retry-button\",children:\"\\u3082\\u3046\\u4E00\\u5EA6\\u30D7\\u30EC\\u30A4\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"ranking\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u6B74\\u4EE3\\u30C8\\u30C3\\u30D75\"}),/*#__PURE__*/_jsx(\"div\",{className:\"ranking-list\",children:topScores.map(score=>/*#__PURE__*/_jsxs(\"div\",{className:\"ranking-item\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"rank\",children:[score.rank,\"\\u4F4D\"]}),/*#__PURE__*/_jsxs(\"span\",{className:\"score-value\",children:[score.score,\"\\u70B9\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"score-date\",children:score.date})]},score.id))})]})]});};export default SnakeGame;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","db","collection","addDoc","query","orderBy","limit","getDocs","where","onSnapshot","jsx","_jsx","jsxs","_jsxs","getCollectionName","mode","difficulty","SnakeGame","_ref","settings","onGameOver","gridSize","centerX","Math","floor","centerY","initialSnake","useMemo","snake","setSnake","food","setFood","specialFood","setSpecialFood","direction","setDirection","directionRef","gameOver","setGameOver","score","setScore","isPlaying","setIsPlaying","highScore","setHighScore","saved","localStorage","getItem","parseInt","topScores","setTopScores","timeLeft","setTimeLeft","initialTime","isTimeUp","setIsTimeUp","checkCollision","head","some","segment","calculateSpeed","speed","max","generateFood","getRandomPosition","random","isPositionOccupied","pos","newFood","generateSpecialFood","types","randomType","length","type","position","timer","setTimeout","clearTimeout","handleSpecialFoodEffect","s","prev","tail","newSegments","Array","fill","resetGame","current","moveSnake","prevSnake","newSnake","push","slice","interval","setInterval","clearInterval","handleKeyPress","e","key","code","preventDefault","activeItems","isActive","handleItemEffect","id","document","addEventListener","gameInterval","removeEventListener","startGame","updateScores","newScore","collectionName","scoresRef","scoreData","date","Date","error","console","queryConstraints","q","unsubscribe","snapshot","scores","docs","map","doc","_objectSpread","data","toDate","toLocaleString","currentRank","prevScore","rankedScores","filter","rank","penaltyTime","setItem","toString","className","children","concat","label","from","_","row","col","isSnake","isFood","isSpecialFood","cellClass","onClick"],"sources":["/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\n\nconst SnakeGame = ({ mode = 'normal', difficulty = 'normal', settings = null, onGameOver = null }) => {\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n  \n  // initialSnakeをuseMemoで最適化\n  const initialSnake = React.useMemo(() => [\n    [centerX, centerY],     // 頭\n    [centerX - 1, centerY], // 胴体\n    [centerX - 2, centerY]  // 尾\n  ], [centerX, centerY]);\n\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [specialFood, setSpecialFood] = useState(null); // { type: 'yellow' | 'blue' | 'black', position: [x, y] }\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n\n  // checkCollision関数を先に定義\n  const checkCollision = useCallback((head) => {\n    return (\n      head[0] < 0 ||\n      head[0] >= gridSize ||\n      head[1] < 0 ||\n      head[1] >= gridSize ||\n      snake.some(segment => segment[0] === head[0] && segment[1] === head[1])\n    );\n  }, [snake, gridSize]);\n\n  const calculateSpeed = useCallback((score) => {\n    let speed = 200 - Math.floor(score / 5) * 10;\n    \n    return Math.max(60, speed);\n  }, []);\n\n  // generateFoodを先に定義\n  const generateFood = useCallback(() => {\n    const getRandomPosition = () => [\n      Math.floor(Math.random() * gridSize),\n      Math.floor(Math.random() * gridSize),\n    ];\n\n    const isPositionOccupied = (pos) => \n      snake.some(segment => segment[0] === pos[0] && segment[1] === pos[1]);\n\n    let newFood;\n    do {\n      newFood = getRandomPosition();\n    } while (isPositionOccupied(newFood));\n\n    setFood(newFood);\n  }, [snake, gridSize]);\n\n  // 特殊エサの生成関数\n  const generateSpecialFood = useCallback(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    // 既に特殊エサがある場合は生成しない\n    if (specialFood) return;\n\n    const types = ['yellow', 'blue', 'black'];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    \n    const getRandomPosition = () => [\n      Math.floor(Math.random() * gridSize),\n      Math.floor(Math.random() * gridSize),\n    ];\n\n    // 既存のヘビ、通常エサとの衝突チェック\n    const isPositionOccupied = (pos) => \n      snake.some(segment => segment[0] === pos[0] && segment[1] === pos[1]) ||\n      (food[0] === pos[0] && food[1] === pos[1]);\n\n    let newFood;\n    do {\n      newFood = getRandomPosition();\n    } while (isPositionOccupied(newFood));\n\n    setSpecialFood({ type: randomType, position: newFood });\n\n    // 5秒後に特殊エサを消す\n    const timer = setTimeout(() => {\n      setSpecialFood(null);\n    }, 5000);\n\n    return () => clearTimeout(timer);\n  }, [snake, food, gridSize, mode, isPlaying, specialFood]);\n\n  // 特殊エサの効果を処理\n  const handleSpecialFoodEffect = useCallback((type) => {\n    switch (type) {\n      case 'yellow':\n        setScore(s => s + 3); // 黄色は3点追加\n        break;\n      case 'blue':\n        setTimeLeft(prev => prev + 5); // 青は時間5秒追加\n        break;\n      case 'black':\n        setSnake(prev => { // 黒はヘビの長さを5増やす\n          const tail = prev[prev.length - 1];\n          const newSegments = Array(5).fill(tail);\n          return [...prev, ...newSegments];\n        });\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // resetGameの定義\n  const resetGame = useCallback(() => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    setFood([0, 0]); // エサを初期位置に戻す（次回開始時に新しい位置が生成される）\n  }, [initialSnake]);\n\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n\n  const moveSnake = useCallback(() => {\n    if (!isPlaying || gameOver) return;\n\n    setSnake(prevSnake => {\n      const head = [...prevSnake[0]];\n      \n      switch (directionRef.current) {\n        case 'UP':\n          head[1] -= 1;\n          break;\n        case 'DOWN':\n          head[1] += 1;\n          break;\n        case 'LEFT':\n          head[0] -= 1;\n          break;\n        case 'RIGHT':\n          head[0] += 1;\n          break;\n        default:\n          break;\n      }\n\n      // 壁やヘビ自身との衝突判定\n      if (checkCollision(head)) {\n        setGameOver(true);\n        setIsPlaying(false);\n        return prevSnake;\n      }\n\n      const newSnake = [head];\n\n      // 通常のエサとの衝突判定\n      if (head[0] === food[0] && head[1] === food[1]) {\n        setScore(s => s + 1);\n        generateFood();\n        newSnake.push(...prevSnake);\n      } else {\n        newSnake.push(...prevSnake.slice(0, -1));\n      }\n\n      // 特殊エサとの衝突判定を追加\n      if (specialFood && head[0] === specialFood.position[0] && head[1] === specialFood.position[1]) {\n        handleSpecialFoodEffect(specialFood.type);\n        setSpecialFood(null);\n      }\n\n      return newSnake;\n    });\n  }, [isPlaying, gameOver, food, generateFood, gridSize, specialFood, handleSpecialFoodEffect, checkCollision]);\n\n  // エサの生成を管理するuseEffect\n  useEffect(() => {\n    // エサが初期位置[0,0]の時のみ生成\n    if (food[0] === 0 && food[1] === 0) {\n      generateFood();\n    }\n  }, [generateFood, food]);\n\n  // 特殊エサの生成タイマー\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) {\n      setSpecialFood(null); // プレイ中でない場合は特殊エサを消す\n      return;\n    }\n\n    // 10秒ごとに特殊エサを生成\n    const interval = setInterval(() => {\n      generateSpecialFood();\n    }, 10000); // 10秒間隔\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [mode, isPlaying, generateSpecialFood]);\n\n  // キーボード入力の処理を修正\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (e.key === 'ArrowUp' || \n          e.key === 'ArrowDown' || \n          e.key === 'ArrowLeft' || \n          e.key === 'ArrowRight' || \n          e.code === 'Space' ||\n          e.key === '1' ||\n          e.key === '2') {\n        e.preventDefault();\n      }\n\n      if (!isPlaying) return;\n\n      // アイテムの使用（1キーで1つ目、2キーで2つ目のアイテム）\n      if (e.key === '1' && activeItems[0] && !activeItems[0].isActive) {\n        handleItemEffect(activeItems[0].id);\n      }\n      if (e.key === '2' && activeItems[1] && !activeItems[1].isActive) {\n        handleItemEffect(activeItems[1].id);\n      }\n\n      // アイテム効果の適用\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed, resetGame]);\n\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      if (food[0] === 0 && food[1] === 0) {\n        generateFood(); // エサが初期位置の場合のみ生成\n      }\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を修正\n  const updateScores = useCallback(async (newScore) => {\n    try {\n      let collectionName;\n      \n      // モードに応じたコレクション名を設定\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        collectionName = 'scorestime';\n      } else if (mode === 'difficulty') {\n        collectionName = getCollectionName(mode, difficulty);\n      } else {\n        collectionName = 'scores'; // 通常モード\n      }\n\n      const scoresRef = collection(db, collectionName);\n      const scoreData = {\n        score: newScore,\n        date: new Date(),\n      };\n\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    let collectionName;\n    \n    // コレクション名の設定\n    if (mode === 'time') {\n      collectionName = 'scorestime';\n    } else if (mode === 'difficulty') {\n      collectionName = getCollectionName(mode, difficulty);\n    } else {\n      collectionName = 'scores';\n    }\n\n    const scoresRef = collection(db, collectionName);\n    \n    // クエリの設定\n    const queryConstraints = [\n      orderBy('score', 'desc'),\n      limit(10)\n    ];\n\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString(),\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n\n      const rankedScores = scores.map((score) => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n\n    if (mode === 'time' && timeLeft > 0) {\n      // 制限時間モードでは即座に再開\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      generateFood(); // 新しい餌を生成\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake, generateFood]);\n\n  // ゲームオーバー時のスコア更新を追加\n  useEffect(() => {\n    if (gameOver && score > 0 && mode !== 'time') {\n      updateScores(score);\n    }\n  }, [gameOver, score, mode, updateScores]);\n\n  // ハイスコアの更新処理を追加\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n      localStorage.setItem('snakeHighScore', score.toString());\n    }\n  }, [score, highScore]);\n\n  return (\n    <div className=\"snake-game\">\n      <h2>\n        {mode === 'time' ? 'スネークゲーム - 制限時間モード' : \n         mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : \n         'スネークゲーム'}\n      </h2>\n      {mode === 'time' && (\n        <div className=\"time-left\">残り時間: {timeLeft}秒</div>\n      )}\n      <div className=\"score-container\">\n        <div className=\"score\">現在のスコア: {score}</div>\n        <div className=\"high-score\">ハイスコア: {highScore}</div>\n      </div>\n      <div className=\"game-board\">\n        {Array.from({ length: gridSize }, (_, row) => (\n          <div key={row} className=\"row\">\n            {Array.from({ length: gridSize }, (_, col) => {\n              const isSnake = snake.some(\n                segment => segment[0] === col && segment[1] === row\n              );\n              const isFood = food[0] === col && food[1] === row;\n              const isSpecialFood = specialFood && \n                specialFood.position[0] === col && \n                specialFood.position[1] === row;\n              \n              let cellClass = 'cell';\n              if (isSnake) cellClass += ' snake';\n              if (isFood) cellClass += ' food';\n              if (isSpecialFood) cellClass += ` special-food-${specialFood.type}`;\n              \n              return (\n                <div\n                  key={`${row}-${col}`}\n                  className={cellClass}\n                />\n              );\n            })}\n          </div>\n        ))}\n      </div>\n      <div className=\"controls\">\n        {!isPlaying && !gameOver && !isTimeUp && (\n          <button onClick={startGame} className=\"start-button\">\n            スタート\n          </button>\n        )}\n        {isPlaying && (\n          <button onClick={() => setIsPlaying(false)} className=\"pause-button\">\n            一時停止\n          </button>\n        )}\n        {(gameOver && mode !== 'time') && (\n          <button onClick={resetGame} className=\"retry-button\">\n            もう一度プレイ\n          </button>\n        )}\n      </div>\n      <div className=\"ranking\">\n        <h3>歴代トップ5</h3>\n        <div className=\"ranking-list\">\n          {topScores.map((score) => (\n            <div key={score.id} className=\"ranking-item\">\n              <span className=\"rank\">{score.rank}位</span>\n              <span className=\"score-value\">{score.score}点</span>\n              <span className=\"score-date\">{score.date}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SnakeGame; "],"mappings":"wHAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,CAAEC,MAAM,KAAQ,OAAO,CACvE,OAASC,EAAE,KAAQ,aAAa,CAChC,OAASC,UAAU,CAAEC,MAAM,CAAEC,KAAK,CAAEC,OAAO,CAAEC,KAAK,CAAEC,OAAO,CAAEC,KAAK,CAAEC,UAAU,KAAQ,oBAAoB,CAC1G,MAAO,yBAAyB,CAEhC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,iBAAiB,CAAGA,CAACC,IAAI,CAAEC,UAAU,GAAK,CAC9C,GAAID,IAAI,GAAK,YAAY,CAAE,CACzB,OAAQC,UAAU,EAChB,IAAK,UAAU,CACb,MAAO,WAAW,CACpB,IAAK,cAAc,CACjB,MAAO,cAAc,CACvB,IAAK,UAAU,CACb,MAAO,YAAY,CACrB,QACE,MAAO,QAAQ,CACnB,CACF,CACA,MAAO,QAAQ,CACjB,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAAoF,IAAnF,CAAEH,IAAI,CAAG,QAAQ,CAAEC,UAAU,CAAG,QAAQ,CAAEG,QAAQ,CAAG,IAAI,CAAEC,UAAU,CAAG,IAAK,CAAC,CAAAF,IAAA,CAC/F,KAAM,CAAAG,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAC,OAAO,CAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAG,CAAC,CAAC,CACxC,KAAM,CAAAI,OAAO,CAAGF,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAG,CAAC,CAAC,CAExC;AACA,KAAM,CAAAK,YAAY,CAAG9B,KAAK,CAAC+B,OAAO,CAAC,IAAM,CACvC,CAACL,OAAO,CAAEG,OAAO,CAAC,CAAM;AACxB,CAACH,OAAO,CAAG,CAAC,CAAEG,OAAO,CAAC,CAAE;AACxB,CAACH,OAAO,CAAG,CAAC,CAAEG,OAAO,CAAG;AAAA,CACzB,CAAE,CAACH,OAAO,CAAEG,OAAO,CAAC,CAAC,CAEtB,KAAM,CAACG,KAAK,CAAEC,QAAQ,CAAC,CAAGhC,QAAQ,CAAC6B,YAAY,CAAC,CAChD,KAAM,CAACI,IAAI,CAAEC,OAAO,CAAC,CAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CACxC,KAAM,CAACmC,WAAW,CAAEC,cAAc,CAAC,CAAGpC,QAAQ,CAAC,IAAI,CAAC,CAAE;AACtD,KAAM,CAACqC,SAAS,CAAEC,YAAY,CAAC,CAAGtC,QAAQ,CAAC,OAAO,CAAC,CACnD,KAAM,CAAAuC,YAAY,CAAGpC,MAAM,CAACkC,SAAS,CAAC,CACtC,KAAM,CAACG,QAAQ,CAAEC,WAAW,CAAC,CAAGzC,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAAC0C,KAAK,CAAEC,QAAQ,CAAC,CAAG3C,QAAQ,CAAC,CAAC,CAAC,CACrC,KAAM,CAAC4C,SAAS,CAAEC,YAAY,CAAC,CAAG7C,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAC8C,SAAS,CAAEC,YAAY,CAAC,CAAG/C,QAAQ,CAAC,IAAM,CAC/C,KAAM,CAAAgD,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CACpD,MAAO,CAAAF,KAAK,CAAGG,QAAQ,CAACH,KAAK,CAAC,CAAG,CAAC,CACpC,CAAC,CAAC,CACF,KAAM,CAACI,SAAS,CAAEC,YAAY,CAAC,CAAGrD,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACsD,QAAQ,CAAEC,WAAW,CAAC,CAAGvD,QAAQ,CAACkB,IAAI,GAAK,MAAM,CAAGI,QAAQ,CAACkC,WAAW,CAAG,IAAI,CAAC,CACvF,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAG1D,QAAQ,CAAC,KAAK,CAAC,CAE/C;AACA,KAAM,CAAA2D,cAAc,CAAGzD,WAAW,CAAE0D,IAAI,EAAK,CAC3C,MACE,CAAAA,IAAI,CAAC,CAAC,CAAC,CAAG,CAAC,EACXA,IAAI,CAAC,CAAC,CAAC,EAAIpC,QAAQ,EACnBoC,IAAI,CAAC,CAAC,CAAC,CAAG,CAAC,EACXA,IAAI,CAAC,CAAC,CAAC,EAAIpC,QAAQ,EACnBO,KAAK,CAAC8B,IAAI,CAACC,OAAO,EAAIA,OAAO,CAAC,CAAC,CAAC,GAAKF,IAAI,CAAC,CAAC,CAAC,EAAIE,OAAO,CAAC,CAAC,CAAC,GAAKF,IAAI,CAAC,CAAC,CAAC,CAAC,CAE3E,CAAC,CAAE,CAAC7B,KAAK,CAAEP,QAAQ,CAAC,CAAC,CAErB,KAAM,CAAAuC,cAAc,CAAG7D,WAAW,CAAEwC,KAAK,EAAK,CAC5C,GAAI,CAAAsB,KAAK,CAAG,GAAG,CAAGtC,IAAI,CAACC,KAAK,CAACe,KAAK,CAAG,CAAC,CAAC,CAAG,EAAE,CAE5C,MAAO,CAAAhB,IAAI,CAACuC,GAAG,CAAC,EAAE,CAAED,KAAK,CAAC,CAC5B,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAE,YAAY,CAAGhE,WAAW,CAAC,IAAM,CACrC,KAAM,CAAAiE,iBAAiB,CAAGA,CAAA,GAAM,CAC9BzC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,MAAM,CAAC,CAAC,CAAG5C,QAAQ,CAAC,CACpCE,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,MAAM,CAAC,CAAC,CAAG5C,QAAQ,CAAC,CACrC,CAED,KAAM,CAAA6C,kBAAkB,CAAIC,GAAG,EAC7BvC,KAAK,CAAC8B,IAAI,CAACC,OAAO,EAAIA,OAAO,CAAC,CAAC,CAAC,GAAKQ,GAAG,CAAC,CAAC,CAAC,EAAIR,OAAO,CAAC,CAAC,CAAC,GAAKQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAEvE,GAAI,CAAAC,OAAO,CACX,EAAG,CACDA,OAAO,CAAGJ,iBAAiB,CAAC,CAAC,CAC/B,CAAC,MAAQE,kBAAkB,CAACE,OAAO,CAAC,EAEpCrC,OAAO,CAACqC,OAAO,CAAC,CAClB,CAAC,CAAE,CAACxC,KAAK,CAAEP,QAAQ,CAAC,CAAC,CAErB;AACA,KAAM,CAAAgD,mBAAmB,CAAGtE,WAAW,CAAC,IAAM,CAC5C,GAAIgB,IAAI,GAAK,MAAM,EAAI,CAAC0B,SAAS,CAAE,OAEnC;AACA,GAAIT,WAAW,CAAE,OAEjB,KAAM,CAAAsC,KAAK,CAAG,CAAC,QAAQ,CAAE,MAAM,CAAE,OAAO,CAAC,CACzC,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAAC/C,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,MAAM,CAAC,CAAC,CAAGK,KAAK,CAACE,MAAM,CAAC,CAAC,CAElE,KAAM,CAAAR,iBAAiB,CAAGA,CAAA,GAAM,CAC9BzC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,MAAM,CAAC,CAAC,CAAG5C,QAAQ,CAAC,CACpCE,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,MAAM,CAAC,CAAC,CAAG5C,QAAQ,CAAC,CACrC,CAED;AACA,KAAM,CAAA6C,kBAAkB,CAAIC,GAAG,EAC7BvC,KAAK,CAAC8B,IAAI,CAACC,OAAO,EAAIA,OAAO,CAAC,CAAC,CAAC,GAAKQ,GAAG,CAAC,CAAC,CAAC,EAAIR,OAAO,CAAC,CAAC,CAAC,GAAKQ,GAAG,CAAC,CAAC,CAAC,CAAC,EACpErC,IAAI,CAAC,CAAC,CAAC,GAAKqC,GAAG,CAAC,CAAC,CAAC,EAAIrC,IAAI,CAAC,CAAC,CAAC,GAAKqC,GAAG,CAAC,CAAC,CAAE,CAE5C,GAAI,CAAAC,OAAO,CACX,EAAG,CACDA,OAAO,CAAGJ,iBAAiB,CAAC,CAAC,CAC/B,CAAC,MAAQE,kBAAkB,CAACE,OAAO,CAAC,EAEpCnC,cAAc,CAAC,CAAEwC,IAAI,CAAEF,UAAU,CAAEG,QAAQ,CAAEN,OAAQ,CAAC,CAAC,CAEvD;AACA,KAAM,CAAAO,KAAK,CAAGC,UAAU,CAAC,IAAM,CAC7B3C,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAM4C,YAAY,CAACF,KAAK,CAAC,CAClC,CAAC,CAAE,CAAC/C,KAAK,CAAEE,IAAI,CAAET,QAAQ,CAAEN,IAAI,CAAE0B,SAAS,CAAET,WAAW,CAAC,CAAC,CAEzD;AACA,KAAM,CAAA8C,uBAAuB,CAAG/E,WAAW,CAAE0E,IAAI,EAAK,CACpD,OAAQA,IAAI,EACV,IAAK,QAAQ,CACXjC,QAAQ,CAACuC,CAAC,EAAIA,CAAC,CAAG,CAAC,CAAC,CAAE;AACtB,MACF,IAAK,MAAM,CACT3B,WAAW,CAAC4B,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAAE;AAC/B,MACF,IAAK,OAAO,CACVnD,QAAQ,CAACmD,IAAI,EAAI,CAAE;AACjB,KAAM,CAAAC,IAAI,CAAGD,IAAI,CAACA,IAAI,CAACR,MAAM,CAAG,CAAC,CAAC,CAClC,KAAM,CAAAU,WAAW,CAAGC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACH,IAAI,CAAC,CACvC,MAAO,CAAC,GAAGD,IAAI,CAAE,GAAGE,WAAW,CAAC,CAClC,CAAC,CAAC,CACF,MACF,QACE,MACJ,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAG,SAAS,CAAGtF,WAAW,CAAC,IAAM,CAClC8B,QAAQ,CAACH,YAAY,CAAC,CACtBS,YAAY,CAAC,OAAO,CAAC,CACrBG,WAAW,CAAC,KAAK,CAAC,CAClBE,QAAQ,CAAC,CAAC,CAAC,CACXE,YAAY,CAAC,KAAK,CAAC,CACnBX,OAAO,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAE;AACnB,CAAC,CAAE,CAACL,YAAY,CAAC,CAAC,CAElB5B,SAAS,CAAC,IAAM,CACdsC,YAAY,CAACkD,OAAO,CAAGpD,SAAS,CAClC,CAAC,CAAE,CAACA,SAAS,CAAC,CAAC,CAEf,KAAM,CAAAqD,SAAS,CAAGxF,WAAW,CAAC,IAAM,CAClC,GAAI,CAAC0C,SAAS,EAAIJ,QAAQ,CAAE,OAE5BR,QAAQ,CAAC2D,SAAS,EAAI,CACpB,KAAM,CAAA/B,IAAI,CAAG,CAAC,GAAG+B,SAAS,CAAC,CAAC,CAAC,CAAC,CAE9B,OAAQpD,YAAY,CAACkD,OAAO,EAC1B,IAAK,IAAI,CACP7B,IAAI,CAAC,CAAC,CAAC,EAAI,CAAC,CACZ,MACF,IAAK,MAAM,CACTA,IAAI,CAAC,CAAC,CAAC,EAAI,CAAC,CACZ,MACF,IAAK,MAAM,CACTA,IAAI,CAAC,CAAC,CAAC,EAAI,CAAC,CACZ,MACF,IAAK,OAAO,CACVA,IAAI,CAAC,CAAC,CAAC,EAAI,CAAC,CACZ,MACF,QACE,MACJ,CAEA;AACA,GAAID,cAAc,CAACC,IAAI,CAAC,CAAE,CACxBnB,WAAW,CAAC,IAAI,CAAC,CACjBI,YAAY,CAAC,KAAK,CAAC,CACnB,MAAO,CAAA8C,SAAS,CAClB,CAEA,KAAM,CAAAC,QAAQ,CAAG,CAAChC,IAAI,CAAC,CAEvB;AACA,GAAIA,IAAI,CAAC,CAAC,CAAC,GAAK3B,IAAI,CAAC,CAAC,CAAC,EAAI2B,IAAI,CAAC,CAAC,CAAC,GAAK3B,IAAI,CAAC,CAAC,CAAC,CAAE,CAC9CU,QAAQ,CAACuC,CAAC,EAAIA,CAAC,CAAG,CAAC,CAAC,CACpBhB,YAAY,CAAC,CAAC,CACd0B,QAAQ,CAACC,IAAI,CAAC,GAAGF,SAAS,CAAC,CAC7B,CAAC,IAAM,CACLC,QAAQ,CAACC,IAAI,CAAC,GAAGF,SAAS,CAACG,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAC1C,CAEA;AACA,GAAI3D,WAAW,EAAIyB,IAAI,CAAC,CAAC,CAAC,GAAKzB,WAAW,CAAC0C,QAAQ,CAAC,CAAC,CAAC,EAAIjB,IAAI,CAAC,CAAC,CAAC,GAAKzB,WAAW,CAAC0C,QAAQ,CAAC,CAAC,CAAC,CAAE,CAC7FI,uBAAuB,CAAC9C,WAAW,CAACyC,IAAI,CAAC,CACzCxC,cAAc,CAAC,IAAI,CAAC,CACtB,CAEA,MAAO,CAAAwD,QAAQ,CACjB,CAAC,CAAC,CACJ,CAAC,CAAE,CAAChD,SAAS,CAAEJ,QAAQ,CAAEP,IAAI,CAAEiC,YAAY,CAAE1C,QAAQ,CAAEW,WAAW,CAAE8C,uBAAuB,CAAEtB,cAAc,CAAC,CAAC,CAE7G;AACA1D,SAAS,CAAC,IAAM,CACd;AACA,GAAIgC,IAAI,CAAC,CAAC,CAAC,GAAK,CAAC,EAAIA,IAAI,CAAC,CAAC,CAAC,GAAK,CAAC,CAAE,CAClCiC,YAAY,CAAC,CAAC,CAChB,CACF,CAAC,CAAE,CAACA,YAAY,CAAEjC,IAAI,CAAC,CAAC,CAExB;AACAhC,SAAS,CAAC,IAAM,CACd,GAAIiB,IAAI,GAAK,MAAM,EAAI,CAAC0B,SAAS,CAAE,CACjCR,cAAc,CAAC,IAAI,CAAC,CAAE;AACtB,OACF,CAEA;AACA,KAAM,CAAA2D,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjCxB,mBAAmB,CAAC,CAAC,CACvB,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX,MAAO,IAAM,CACXyB,aAAa,CAACF,QAAQ,CAAC,CACzB,CAAC,CACH,CAAC,CAAE,CAAC7E,IAAI,CAAE0B,SAAS,CAAE4B,mBAAmB,CAAC,CAAC,CAE1C;AACAvE,SAAS,CAAC,IAAM,CACd,KAAM,CAAAiG,cAAc,CAAIC,CAAC,EAAK,CAC5B,GAAIA,CAAC,CAACC,GAAG,GAAK,SAAS,EACnBD,CAAC,CAACC,GAAG,GAAK,WAAW,EACrBD,CAAC,CAACC,GAAG,GAAK,WAAW,EACrBD,CAAC,CAACC,GAAG,GAAK,YAAY,EACtBD,CAAC,CAACE,IAAI,GAAK,OAAO,EAClBF,CAAC,CAACC,GAAG,GAAK,GAAG,EACbD,CAAC,CAACC,GAAG,GAAK,GAAG,CAAE,CACjBD,CAAC,CAACG,cAAc,CAAC,CAAC,CACpB,CAEA,GAAI,CAAC1D,SAAS,CAAE,OAEhB;AACA,GAAIuD,CAAC,CAACC,GAAG,GAAK,GAAG,EAAIG,WAAW,CAAC,CAAC,CAAC,EAAI,CAACA,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAE,CAC/DC,gBAAgB,CAACF,WAAW,CAAC,CAAC,CAAC,CAACG,EAAE,CAAC,CACrC,CACA,GAAIP,CAAC,CAACC,GAAG,GAAK,GAAG,EAAIG,WAAW,CAAC,CAAC,CAAC,EAAI,CAACA,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAE,CAC/DC,gBAAgB,CAACF,WAAW,CAAC,CAAC,CAAC,CAACG,EAAE,CAAC,CACrC,CAEA;AACA,GAAIP,CAAC,CAACE,IAAI,GAAK,OAAO,CAAE,CACtB,GAAI7D,QAAQ,CAAE,CACZgD,SAAS,CAAC,CAAC,CACb,CAAC,IAAM,CACL3C,YAAY,CAACsC,IAAI,EAAI,CAACA,IAAI,CAAC,CAC7B,CACA,OACF,CAEA,OAAQgB,CAAC,CAACC,GAAG,EACX,IAAK,SAAS,CACZ,GAAI7D,YAAY,CAACkD,OAAO,GAAK,MAAM,CAAEnD,YAAY,CAAC,IAAI,CAAC,CACvD,MACF,IAAK,WAAW,CACd,GAAIC,YAAY,CAACkD,OAAO,GAAK,IAAI,CAAEnD,YAAY,CAAC,MAAM,CAAC,CACvD,MACF,IAAK,WAAW,CACd,GAAIC,YAAY,CAACkD,OAAO,GAAK,OAAO,CAAEnD,YAAY,CAAC,MAAM,CAAC,CAC1D,MACF,IAAK,YAAY,CACf,GAAIC,YAAY,CAACkD,OAAO,GAAK,MAAM,CAAEnD,YAAY,CAAC,OAAO,CAAC,CAC1D,MACF,QACE,MACJ,CACF,CAAC,CAEDqE,QAAQ,CAACC,gBAAgB,CAAC,SAAS,CAAEV,cAAc,CAAC,CACpD,KAAM,CAAAW,YAAY,CAAGb,WAAW,CAACN,SAAS,CAAE3B,cAAc,CAACrB,KAAK,CAAC,CAAC,CAElE,MAAO,IAAM,CACXiE,QAAQ,CAACG,mBAAmB,CAAC,SAAS,CAAEZ,cAAc,CAAC,CACvDD,aAAa,CAACY,YAAY,CAAC,CAC7B,CAAC,CACH,CAAC,CAAE,CAACnB,SAAS,CAAElD,QAAQ,CAAEI,SAAS,CAAEF,KAAK,CAAEqB,cAAc,CAAEyB,SAAS,CAAC,CAAC,CAEtE,KAAM,CAAAuB,SAAS,CAAGA,CAAA,GAAM,CACtB,GAAI,CAACnE,SAAS,EAAI,CAACJ,QAAQ,CAAE,CAC3B,GAAIP,IAAI,CAAC,CAAC,CAAC,GAAK,CAAC,EAAIA,IAAI,CAAC,CAAC,CAAC,GAAK,CAAC,CAAE,CAClCiC,YAAY,CAAC,CAAC,CAAE;AAClB,CACArB,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CAAC,CAED;AACA,KAAM,CAAAmE,YAAY,CAAG9G,WAAW,CAAC,KAAO,CAAA+G,QAAQ,EAAK,CACnD,GAAI,CACF,GAAI,CAAAC,cAAc,CAElB;AACA,GAAIhG,IAAI,GAAK,MAAM,CAAE,CACnB,GAAIoC,QAAQ,CAAG,CAAC,CAAE,OAAQ;AAC1B4D,cAAc,CAAG,YAAY,CAC/B,CAAC,IAAM,IAAIhG,IAAI,GAAK,YAAY,CAAE,CAChCgG,cAAc,CAAGjG,iBAAiB,CAACC,IAAI,CAAEC,UAAU,CAAC,CACtD,CAAC,IAAM,CACL+F,cAAc,CAAG,QAAQ,CAAE;AAC7B,CAEA,KAAM,CAAAC,SAAS,CAAG9G,UAAU,CAACD,EAAE,CAAE8G,cAAc,CAAC,CAChD,KAAM,CAAAE,SAAS,CAAG,CAChB1E,KAAK,CAAEuE,QAAQ,CACfI,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CACjB,CAAC,CAED,KAAM,CAAAhH,MAAM,CAAC6G,SAAS,CAAEC,SAAS,CAAC,CACpC,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC7C,CACF,CAAC,CAAE,CAACrG,IAAI,CAAEC,UAAU,CAAEmC,QAAQ,CAAC,CAAC,CAEhC;AACArD,SAAS,CAAC,IAAM,CACd,GAAI,CAAAiH,cAAc,CAElB;AACA,GAAIhG,IAAI,GAAK,MAAM,CAAE,CACnBgG,cAAc,CAAG,YAAY,CAC/B,CAAC,IAAM,IAAIhG,IAAI,GAAK,YAAY,CAAE,CAChCgG,cAAc,CAAGjG,iBAAiB,CAACC,IAAI,CAAEC,UAAU,CAAC,CACtD,CAAC,IAAM,CACL+F,cAAc,CAAG,QAAQ,CAC3B,CAEA,KAAM,CAAAC,SAAS,CAAG9G,UAAU,CAACD,EAAE,CAAE8G,cAAc,CAAC,CAEhD;AACA,KAAM,CAAAO,gBAAgB,CAAG,CACvBjH,OAAO,CAAC,OAAO,CAAE,MAAM,CAAC,CACxBC,KAAK,CAAC,EAAE,CAAC,CACV,CAED,KAAM,CAAAiH,CAAC,CAAGnH,KAAK,CAAC4G,SAAS,CAAE,GAAGM,gBAAgB,CAAC,CAE/C;AACA,KAAM,CAAAE,WAAW,CAAG/G,UAAU,CAAC8G,CAAC,CAAGE,QAAQ,EAAK,CAC9C,KAAM,CAAAC,MAAM,CAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,EAAAC,aAAA,CAAAA,aAAA,EAClCvB,EAAE,CAAEsB,GAAG,CAACtB,EAAE,EACPsB,GAAG,CAACE,IAAI,CAAC,CAAC,MACbb,IAAI,CAAEW,GAAG,CAACE,IAAI,CAAC,CAAC,CAACb,IAAI,CAACc,MAAM,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,EAC/C,CAAC,CAEH;AACA,GAAI,CAAAC,WAAW,CAAG,CAAC,CACnB,GAAI,CAAAC,SAAS,CAAG,IAAI,CAEpB,KAAM,CAAAC,YAAY,CAAGV,MAAM,CAACE,GAAG,CAAErF,KAAK,EAAK,CACzC,GAAI4F,SAAS,GAAK,IAAI,EAAI5F,KAAK,CAACA,KAAK,GAAK4F,SAAS,CAAE,CACnDD,WAAW,CAAGR,MAAM,CAACW,MAAM,CAACtD,CAAC,EAAIA,CAAC,CAACxC,KAAK,CAAGA,KAAK,CAACA,KAAK,CAAC,CAACiC,MAAM,CAAG,CAAC,CACpE,CACA2D,SAAS,CAAG5F,KAAK,CAACA,KAAK,CACvB,OAAAuF,aAAA,CAAAA,aAAA,IACKvF,KAAK,MACR+F,IAAI,CAAEJ,WAAW,GAErB,CAAC,CAAC,CAEF,KAAM,CAAAjF,SAAS,CAAGmF,YAAY,CAACC,MAAM,CAAC9F,KAAK,EAAIA,KAAK,CAAC+F,IAAI,EAAI,CAAC,CAAC,CAC/DpF,YAAY,CAACD,SAAS,CAAC,CACzB,CAAC,CAAC,CAEF,MAAO,IAAMuE,WAAW,CAAC,CAAC,CAC5B,CAAC,CAAE,CAACzG,IAAI,CAAEC,UAAU,CAAC,CAAC,CAEtB;AACAlB,SAAS,CAAC,IAAM,CACd,GAAIiB,IAAI,GAAK,MAAM,EAAI,CAAC0B,SAAS,CAAE,OAEnC,KAAM,CAAAkC,KAAK,CAAGkB,WAAW,CAAC,IAAM,CAC9BzC,WAAW,CAAC4B,IAAI,EAAI,CAClB,GAAIA,IAAI,EAAI,CAAC,CAAE,CACbc,aAAa,CAACnB,KAAK,CAAC,CACpBpB,WAAW,CAAC,IAAI,CAAC,CACjBb,YAAY,CAAC,KAAK,CAAC,CACnB;AACA,MAAO,EAAC,CACV,CACA,MAAO,CAAAsC,IAAI,CAAG,CAAC,CACjB,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAMc,aAAa,CAACnB,KAAK,CAAC,CACnC,CAAC,CAAE,CAAClC,SAAS,CAAE1B,IAAI,CAAC,CAAC,CAErB;AACAjB,SAAS,CAAC,IAAM,CACd,GAAIiB,IAAI,GAAK,MAAM,EAAIoC,QAAQ,GAAK,CAAC,EAAI,CAACV,SAAS,EAAI,CAACJ,QAAQ,CAAE,CAChEwE,YAAY,CAACtE,KAAK,CAAC,CACrB,CACF,CAAC,CAAE,CAACxB,IAAI,CAAEoC,QAAQ,CAAEV,SAAS,CAAEJ,QAAQ,CAAEE,KAAK,CAAEsE,YAAY,CAAC,CAAC,CAE9D;AACA/G,SAAS,CAAC,IAAM,CACd,GAAI,CAACuC,QAAQ,CAAE,OAEf,GAAItB,IAAI,GAAK,MAAM,EAAIoC,QAAQ,CAAG,CAAC,CAAE,CACnC;AACAC,WAAW,CAAC4B,IAAI,EAAIzD,IAAI,CAACuC,GAAG,CAAC,CAAC,CAAEkB,IAAI,CAAG7D,QAAQ,CAACoH,WAAW,CAAC,CAAC,CAC7DjG,WAAW,CAAC,KAAK,CAAC,CAClBT,QAAQ,CAACH,YAAY,CAAC,CACtBS,YAAY,CAAC,OAAO,CAAC,CACrBO,YAAY,CAAC,IAAI,CAAC,CAClBqB,YAAY,CAAC,CAAC,CAAE;AAClB,CACF,CAAC,CAAE,CAAC1B,QAAQ,CAAEtB,IAAI,CAAEoC,QAAQ,CAAEhC,QAAQ,CAAEO,YAAY,CAAEqC,YAAY,CAAC,CAAC,CAEpE;AACAjE,SAAS,CAAC,IAAM,CACd,GAAIuC,QAAQ,EAAIE,KAAK,CAAG,CAAC,EAAIxB,IAAI,GAAK,MAAM,CAAE,CAC5C8F,YAAY,CAACtE,KAAK,CAAC,CACrB,CACF,CAAC,CAAE,CAACF,QAAQ,CAAEE,KAAK,CAAExB,IAAI,CAAE8F,YAAY,CAAC,CAAC,CAEzC;AACA/G,SAAS,CAAC,IAAM,CACd,GAAIyC,KAAK,CAAGI,SAAS,CAAE,CACrBC,YAAY,CAACL,KAAK,CAAC,CACnBO,YAAY,CAAC0F,OAAO,CAAC,gBAAgB,CAAEjG,KAAK,CAACkG,QAAQ,CAAC,CAAC,CAAC,CAC1D,CACF,CAAC,CAAE,CAAClG,KAAK,CAAEI,SAAS,CAAC,CAAC,CAEtB,mBACE9B,KAAA,QAAK6H,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzBhI,IAAA,OAAAgI,QAAA,CACG5H,IAAI,GAAK,MAAM,CAAG,mBAAmB,CACrCA,IAAI,GAAK,YAAY,iDAAA6H,MAAA,CAAgBzH,QAAQ,CAAC0H,KAAK,EACnD,SAAS,CACR,CAAC,CACJ9H,IAAI,GAAK,MAAM,eACdF,KAAA,QAAK6H,SAAS,CAAC,WAAW,CAAAC,QAAA,EAAC,4BAAM,CAACxF,QAAQ,CAAC,QAAC,EAAK,CAClD,cACDtC,KAAA,QAAK6H,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B9H,KAAA,QAAK6H,SAAS,CAAC,OAAO,CAAAC,QAAA,EAAC,wCAAQ,CAACpG,KAAK,EAAM,CAAC,cAC5C1B,KAAA,QAAK6H,SAAS,CAAC,YAAY,CAAAC,QAAA,EAAC,kCAAO,CAAChG,SAAS,EAAM,CAAC,EACjD,CAAC,cACNhC,IAAA,QAAK+H,SAAS,CAAC,YAAY,CAAAC,QAAA,CACxBxD,KAAK,CAAC2D,IAAI,CAAC,CAAEtE,MAAM,CAAEnD,QAAS,CAAC,CAAE,CAAC0H,CAAC,CAAEC,GAAG,gBACvCrI,IAAA,QAAe+H,SAAS,CAAC,KAAK,CAAAC,QAAA,CAC3BxD,KAAK,CAAC2D,IAAI,CAAC,CAAEtE,MAAM,CAAEnD,QAAS,CAAC,CAAE,CAAC0H,CAAC,CAAEE,GAAG,GAAK,CAC5C,KAAM,CAAAC,OAAO,CAAGtH,KAAK,CAAC8B,IAAI,CACxBC,OAAO,EAAIA,OAAO,CAAC,CAAC,CAAC,GAAKsF,GAAG,EAAItF,OAAO,CAAC,CAAC,CAAC,GAAKqF,GAClD,CAAC,CACD,KAAM,CAAAG,MAAM,CAAGrH,IAAI,CAAC,CAAC,CAAC,GAAKmH,GAAG,EAAInH,IAAI,CAAC,CAAC,CAAC,GAAKkH,GAAG,CACjD,KAAM,CAAAI,aAAa,CAAGpH,WAAW,EAC/BA,WAAW,CAAC0C,QAAQ,CAAC,CAAC,CAAC,GAAKuE,GAAG,EAC/BjH,WAAW,CAAC0C,QAAQ,CAAC,CAAC,CAAC,GAAKsE,GAAG,CAEjC,GAAI,CAAAK,SAAS,CAAG,MAAM,CACtB,GAAIH,OAAO,CAAEG,SAAS,EAAI,QAAQ,CAClC,GAAIF,MAAM,CAAEE,SAAS,EAAI,OAAO,CAChC,GAAID,aAAa,CAAEC,SAAS,mBAAAT,MAAA,CAAqB5G,WAAW,CAACyC,IAAI,CAAE,CAEnE,mBACE9D,IAAA,QAEE+H,SAAS,CAAEW,SAAU,KAAAT,MAAA,CADbI,GAAG,MAAAJ,MAAA,CAAIK,GAAG,CAEnB,CAAC,CAEN,CAAC,CAAC,EArBMD,GAsBL,CACN,CAAC,CACC,CAAC,cACNnI,KAAA,QAAK6H,SAAS,CAAC,UAAU,CAAAC,QAAA,EACtB,CAAClG,SAAS,EAAI,CAACJ,QAAQ,EAAI,CAACiB,QAAQ,eACnC3C,IAAA,WAAQ2I,OAAO,CAAE1C,SAAU,CAAC8B,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,0BAErD,CAAQ,CACT,CACAlG,SAAS,eACR9B,IAAA,WAAQ2I,OAAO,CAAEA,CAAA,GAAM5G,YAAY,CAAC,KAAK,CAAE,CAACgG,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,0BAErE,CAAQ,CACT,CACCtG,QAAQ,EAAItB,IAAI,GAAK,MAAM,eAC3BJ,IAAA,WAAQ2I,OAAO,CAAEjE,SAAU,CAACqD,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,4CAErD,CAAQ,CACT,EACE,CAAC,cACN9H,KAAA,QAAK6H,SAAS,CAAC,SAAS,CAAAC,QAAA,eACtBhI,IAAA,OAAAgI,QAAA,CAAI,iCAAM,CAAI,CAAC,cACfhI,IAAA,QAAK+H,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1B1F,SAAS,CAAC2E,GAAG,CAAErF,KAAK,eACnB1B,KAAA,QAAoB6H,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC1C9H,KAAA,SAAM6H,SAAS,CAAC,MAAM,CAAAC,QAAA,EAAEpG,KAAK,CAAC+F,IAAI,CAAC,QAAC,EAAM,CAAC,cAC3CzH,KAAA,SAAM6H,SAAS,CAAC,aAAa,CAAAC,QAAA,EAAEpG,KAAK,CAACA,KAAK,CAAC,QAAC,EAAM,CAAC,cACnD5B,IAAA,SAAM+H,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAEpG,KAAK,CAAC2E,IAAI,CAAO,CAAC,GAHxC3E,KAAK,CAACgE,EAIX,CACN,CAAC,CACC,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}