{"ast":null,"code":"var _jsxFileName = \"/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\nconst SnakeGame = ({\n  mode = 'normal',\n  difficulty = 'normal',\n  settings = null,\n  onGameOver = null,\n  selectedItems = []\n}) => {\n  _s();\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n\n  // initialSnakeをuseMemoで最適化\n  const initialSnake = React.useMemo(() => [[centerX, centerY],\n  // 頭\n  [centerX - 1, centerY],\n  // 胴体\n  [centerX - 2, centerY] // 尾\n  ], [centerX, centerY]);\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [specialFood, setSpecialFood] = useState(null); // { type: 'yellow' | 'blue' | 'black', position: [x, y] }\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n  const [items, setItems] = useState([]);\n\n  // アイテムの状態を管理\n  const [activeItems, setActiveItems] = useState(selectedItems.map(item => ({\n    id: item,\n    isActive: false,\n    timeLeft: 0\n  })));\n  const calculateSpeed = useCallback(score => {\n    let speed = 200 - Math.floor(score / 5) * 10;\n\n    // スピードブーストが有効な場合、速度を2倍に\n    if (activeItems.find(item => item.id === 'speed' && item.isActive)) {\n      speed = Math.max(30, speed / 2);\n    }\n    return Math.max(60, speed);\n  }, [activeItems]);\n\n  // generateFoodを先に定義\n  const generateFood = useCallback(() => {\n    const getRandomPosition = () => [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n    const isPositionOccupied = pos => snake.some(segment => segment[0] === pos[0] && segment[1] === pos[1]);\n    let newFood;\n    do {\n      newFood = getRandomPosition();\n    } while (isPositionOccupied(newFood));\n    setFood(newFood);\n  }, [snake, gridSize]);\n\n  // 特殊エサの生成関数\n  const generateSpecialFood = useCallback(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    // 既に特殊エサがある場合は生成しない\n    if (specialFood) return;\n    const types = ['yellow', 'blue', 'black'];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    const getRandomPosition = () => [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n\n    // 既存のヘビ、通常エサとの衝突チェック\n    const isPositionOccupied = pos => snake.some(segment => segment[0] === pos[0] && segment[1] === pos[1]) || food[0] === pos[0] && food[1] === pos[1];\n    let newFood;\n    do {\n      newFood = getRandomPosition();\n    } while (isPositionOccupied(newFood));\n    setSpecialFood({\n      type: randomType,\n      position: newFood\n    });\n\n    // 5秒後に特殊エサを消す\n    const timer = setTimeout(() => {\n      setSpecialFood(null);\n    }, 5000);\n    return () => clearTimeout(timer);\n  }, [snake, food, gridSize, mode, isPlaying, specialFood]);\n\n  // 特殊エサの効果を処理\n  const handleSpecialFoodEffect = useCallback(type => {\n    switch (type) {\n      case 'yellow':\n        setScore(s => s + 3); // 黄色は3点追加\n        break;\n      case 'blue':\n        setTimeLeft(prev => prev + 5); // 青は時間5秒追加\n        break;\n      case 'black':\n        setSnake(prev => {\n          // 黒はヘビの長さを5増やす\n          const tail = prev[prev.length - 1];\n          const newSegments = Array(5).fill(tail);\n          return [...prev, ...newSegments];\n        });\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // resetGameの定義\n  const resetGame = useCallback(() => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    setFood([0, 0]); // エサを初期位置に戻す（次回開始時に新しい位置が生成される）\n  }, [initialSnake]);\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n  const moveSnake = useCallback(() => {\n    if (!isPlaying || gameOver) return;\n    setSnake(prevSnake => {\n      const head = [...prevSnake[0]];\n      switch (directionRef.current) {\n        case 'UP':\n          head[1] -= 1;\n          break;\n        case 'DOWN':\n          head[1] += 1;\n          break;\n        case 'LEFT':\n          head[0] -= 1;\n          break;\n        case 'RIGHT':\n          head[0] += 1;\n          break;\n        default:\n          break;\n      }\n\n      // 壁やヘビ自身との衝突判定\n      if (checkCollision(head)) {\n        setGameOver(true);\n        setIsPlaying(false);\n        return prevSnake;\n      }\n      const newSnake = [head];\n\n      // 通常のエサとの衝突判定\n      if (head[0] === food[0] && head[1] === food[1]) {\n        setScore(s => s + 1);\n        generateFood();\n        newSnake.push(...prevSnake);\n      } else {\n        newSnake.push(...prevSnake.slice(0, -1));\n      }\n\n      // 特殊エサとの衝突判定を追加\n      if (specialFood && head[0] === specialFood.position[0] && head[1] === specialFood.position[1]) {\n        handleSpecialFoodEffect(specialFood.type);\n        setSpecialFood(null);\n      }\n      return newSnake;\n    });\n  }, [isPlaying, gameOver, food, generateFood, gridSize, specialFood, handleSpecialFoodEffect, checkCollision]);\n\n  // エサの生成を管理するuseEffect\n  useEffect(() => {\n    // エサが初期位置[0,0]の時のみ生成\n    if (food[0] === 0 && food[1] === 0) {\n      generateFood();\n    }\n  }, [generateFood, food]);\n\n  // 特殊エサの生成タイマー\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) {\n      setSpecialFood(null); // プレイ中でない場合は特殊エサを消す\n      return;\n    }\n\n    // 10秒ごとに特殊エサを生成\n    const interval = setInterval(() => {\n      generateSpecialFood();\n    }, 10000); // 10秒間隔\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [mode, isPlaying, generateSpecialFood]);\n\n  // アイテムの効果を処理する関数\n  const handleItemEffect = useCallback(itemId => {\n    switch (itemId) {\n      case 'speed':\n        setActiveItems(prev => prev.map(item => item.id === 'speed' ? {\n          ...item,\n          isActive: true,\n          timeLeft: 10\n        } : item));\n        break;\n      case 'shield':\n        setActiveItems(prev => prev.map(item => item.id === 'shield' ? {\n          ...item,\n          isActive: true,\n          timeLeft: 5\n        } : item));\n        break;\n      case 'magnet':\n        setActiveItems(prev => prev.map(item => item.id === 'magnet' ? {\n          ...item,\n          isActive: true,\n          timeLeft: 10\n        } : item));\n        break;\n      case 'double':\n        setActiveItems(prev => prev.map(item => item.id === 'double' ? {\n          ...item,\n          isActive: true,\n          timeLeft: 15\n        } : item));\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // アイテムの効果時間を管理\n  useEffect(() => {\n    if (!isPlaying || activeItems.every(item => !item.isActive)) return;\n    const timer = setInterval(() => {\n      setActiveItems(prev => prev.map(item => {\n        if (!item.isActive) return item;\n        const newTimeLeft = item.timeLeft - 1;\n        return {\n          ...item,\n          isActive: newTimeLeft > 0,\n          timeLeft: Math.max(0, newTimeLeft)\n        };\n      }));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [isPlaying, activeItems]);\n\n  // キーボード入力の処理を修正\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space' || e.key === '1' || e.key === '2') {\n        e.preventDefault();\n      }\n      if (!isPlaying) return;\n\n      // アイテムの使用（1キーで1つ目、2キーで2つ目のアイテム）\n      if (e.key === '1' && activeItems[0] && !activeItems[0].isActive) {\n        handleItemEffect(activeItems[0].id);\n      }\n      if (e.key === '2' && activeItems[1] && !activeItems[1].isActive) {\n        handleItemEffect(activeItems[1].id);\n      }\n\n      // アイテム効果の適用\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed, resetGame, activeItems, handleItemEffect]);\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      if (food[0] === 0 && food[1] === 0) {\n        generateFood(); // エサが初期位置の場合のみ生成\n      }\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を修正\n  const updateScores = useCallback(async newScore => {\n    try {\n      let collectionName;\n\n      // モードに応じたコレクション名を設定\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        collectionName = 'scorestime';\n      } else if (mode === 'difficulty') {\n        collectionName = getCollectionName(mode, difficulty);\n      } else if (mode === 'item') {\n        collectionName = 'scoresitem'; // アイテムモード用のコレクション\n      } else {\n        collectionName = 'scores'; // 通常モード\n      }\n      const scoresRef = collection(db, collectionName);\n      const scoreData = {\n        score: newScore,\n        date: new Date(),\n        items: selectedItems || [] // アイテムモードの場合、選択したアイテムも保存\n      };\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft, selectedItems]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    let collectionName;\n\n    // コレクション名の設定\n    if (mode === 'time') {\n      collectionName = 'scorestime';\n    } else if (mode === 'difficulty') {\n      collectionName = getCollectionName(mode, difficulty);\n    } else if (mode === 'item') {\n      collectionName = 'scoresitem';\n    } else {\n      collectionName = 'scores';\n    }\n    const scoresRef = collection(db, collectionName);\n\n    // クエリの設定\n    const queryConstraints = [orderBy('score', 'desc'), limit(10)];\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, snapshot => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString(),\n        items: doc.data().items || [] // アイテム情報を取得\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n      const rankedScores = scores.map(score => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n    if (mode === 'time' && timeLeft > 0) {\n      // 制限時間モードでは即座に再開\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      generateFood(); // 新しい餌を生成\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake, generateFood]);\n\n  // ゲームオーバー時のスコア更新を追加\n  useEffect(() => {\n    if (gameOver && score > 0 && mode !== 'time') {\n      updateScores(score);\n    }\n  }, [gameOver, score, mode, updateScores]);\n\n  // ハイスコアの更新処理を追加\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n      localStorage.setItem('snakeHighScore', score.toString());\n    }\n  }, [score, highScore]);\n\n  // 壁との衝突判定を修正（シールド効果の適用）\n  const checkCollision = useCallback(head => {\n    const hasShield = activeItems.find(item => item.id === 'shield' && item.isActive);\n    if (hasShield) return false;\n    return head[0] < 0 || head[0] >= gridSize || head[1] < 0 || head[1] >= gridSize || snake.some(segment => segment[0] === head[0] && segment[1] === head[1]);\n  }, [activeItems, gridSize, snake]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: mode === 'time' ? 'スネークゲーム - 制限時間モード' : mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : 'スネークゲーム'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this), mode === 'time' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-left\",\n      children: [\"\\u6B8B\\u308A\\u6642\\u9593: \", timeLeft, \"\\u79D2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"\\u73FE\\u5728\\u306E\\u30B9\\u30B3\\u30A2: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"high-score\",\n        children: [\"\\u30CF\\u30A4\\u30B9\\u30B3\\u30A2: \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: Array.from({\n        length: gridSize\n      }, (_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: Array.from({\n          length: gridSize\n        }, (_, col) => {\n          const isSnake = snake.some(segment => segment[0] === col && segment[1] === row);\n          const isFood = food[0] === col && food[1] === row;\n          const isSpecialFood = specialFood && specialFood.position[0] === col && specialFood.position[1] === row;\n          let cellClass = 'cell';\n          if (isSnake) cellClass += ' snake';\n          if (isFood) cellClass += ' food';\n          if (isSpecialFood) cellClass += ` special-food-${specialFood.type}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cellClass\n          }, `${row}-${col}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 17\n          }, this);\n        })\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [!isPlaying && !gameOver && !isTimeUp && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        className: \"start-button\",\n        children: \"\\u30B9\\u30BF\\u30FC\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this), isPlaying && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsPlaying(false),\n        className: \"pause-button\",\n        children: \"\\u4E00\\u6642\\u505C\\u6B62\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 11\n      }, this), gameOver && mode !== 'time' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"retry-button\",\n        children: \"\\u3082\\u3046\\u4E00\\u5EA6\\u30D7\\u30EC\\u30A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ranking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6B74\\u4EE3\\u30C8\\u30C3\\u30D75\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ranking-list\",\n        children: topScores.map(score => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ranking-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"rank\",\n            children: [score.rank, \"\\u4F4D\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-value\",\n            children: [score.score, \"\\u70B9\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this), mode === 'item' && score.items && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"items-used\",\n            children: [\"\\u4F7F\\u7528\\u30A2\\u30A4\\u30C6\\u30E0: \", score.items.map(item => {\n              const itemInfo = items.find(i => i.id === item);\n              return itemInfo ? itemInfo.icon : '';\n            }).join(' ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-date\",\n            children: score.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 15\n          }, this)]\n        }, score.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 7\n    }, this), mode === 'item' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"active-items\",\n      children: activeItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `item-status ${item.isActive ? 'active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-key\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-icon\",\n          children: [item.id === 'speed' && '⚡', item.id === 'shield' && '🛡️', item.id === 'magnet' && '🧲', item.id === 'double' && '✨']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 15\n        }, this), item.isActive && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-timer\",\n          children: [item.timeLeft, \"\\u79D2\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 33\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 509,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"Ok2Galf3j2qrzQxiTyT+AGi/t+A=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","db","collection","addDoc","query","orderBy","limit","getDocs","where","onSnapshot","jsxDEV","_jsxDEV","getCollectionName","mode","difficulty","SnakeGame","settings","onGameOver","selectedItems","_s","gridSize","centerX","Math","floor","centerY","initialSnake","useMemo","snake","setSnake","food","setFood","specialFood","setSpecialFood","direction","setDirection","directionRef","gameOver","setGameOver","score","setScore","isPlaying","setIsPlaying","highScore","setHighScore","saved","localStorage","getItem","parseInt","topScores","setTopScores","timeLeft","setTimeLeft","initialTime","isTimeUp","setIsTimeUp","items","setItems","activeItems","setActiveItems","map","item","id","isActive","calculateSpeed","speed","find","max","generateFood","getRandomPosition","random","isPositionOccupied","pos","some","segment","newFood","generateSpecialFood","types","randomType","length","type","position","timer","setTimeout","clearTimeout","handleSpecialFoodEffect","s","prev","tail","newSegments","Array","fill","resetGame","current","moveSnake","prevSnake","head","checkCollision","newSnake","push","slice","interval","setInterval","clearInterval","handleItemEffect","itemId","every","newTimeLeft","handleKeyPress","e","key","code","preventDefault","document","addEventListener","gameInterval","removeEventListener","startGame","updateScores","newScore","collectionName","scoresRef","scoreData","date","Date","error","console","queryConstraints","q","unsubscribe","snapshot","scores","docs","doc","data","toDate","toLocaleString","currentRank","prevScore","rankedScores","filter","rank","penaltyTime","setItem","toString","hasShield","className","children","label","fileName","_jsxFileName","lineNumber","columnNumber","from","_","row","col","isSnake","isFood","isSpecialFood","cellClass","onClick","itemInfo","i","icon","join","index","_c","$RefreshReg$"],"sources":["/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\n\nconst SnakeGame = ({ mode = 'normal', difficulty = 'normal', settings = null, onGameOver = null, selectedItems = [] }) => {\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n  \n  // initialSnakeをuseMemoで最適化\n  const initialSnake = React.useMemo(() => [\n    [centerX, centerY],     // 頭\n    [centerX - 1, centerY], // 胴体\n    [centerX - 2, centerY]  // 尾\n  ], [centerX, centerY]);\n\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [specialFood, setSpecialFood] = useState(null); // { type: 'yellow' | 'blue' | 'black', position: [x, y] }\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n  const [items, setItems] = useState([]);\n\n  // アイテムの状態を管理\n  const [activeItems, setActiveItems] = useState(selectedItems.map(item => ({\n    id: item,\n    isActive: false,\n    timeLeft: 0\n  })));\n\n  const calculateSpeed = useCallback((score) => {\n    let speed = 200 - Math.floor(score / 5) * 10;\n    \n    // スピードブーストが有効な場合、速度を2倍に\n    if (activeItems.find(item => item.id === 'speed' && item.isActive)) {\n      speed = Math.max(30, speed / 2);\n    }\n    \n    return Math.max(60, speed);\n  }, [activeItems]);\n\n  // generateFoodを先に定義\n  const generateFood = useCallback(() => {\n    const getRandomPosition = () => [\n      Math.floor(Math.random() * gridSize),\n      Math.floor(Math.random() * gridSize),\n    ];\n\n    const isPositionOccupied = (pos) => \n      snake.some(segment => segment[0] === pos[0] && segment[1] === pos[1]);\n\n    let newFood;\n    do {\n      newFood = getRandomPosition();\n    } while (isPositionOccupied(newFood));\n\n    setFood(newFood);\n  }, [snake, gridSize]);\n\n  // 特殊エサの生成関数\n  const generateSpecialFood = useCallback(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    // 既に特殊エサがある場合は生成しない\n    if (specialFood) return;\n\n    const types = ['yellow', 'blue', 'black'];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    \n    const getRandomPosition = () => [\n      Math.floor(Math.random() * gridSize),\n      Math.floor(Math.random() * gridSize),\n    ];\n\n    // 既存のヘビ、通常エサとの衝突チェック\n    const isPositionOccupied = (pos) => \n      snake.some(segment => segment[0] === pos[0] && segment[1] === pos[1]) ||\n      (food[0] === pos[0] && food[1] === pos[1]);\n\n    let newFood;\n    do {\n      newFood = getRandomPosition();\n    } while (isPositionOccupied(newFood));\n\n    setSpecialFood({ type: randomType, position: newFood });\n\n    // 5秒後に特殊エサを消す\n    const timer = setTimeout(() => {\n      setSpecialFood(null);\n    }, 5000);\n\n    return () => clearTimeout(timer);\n  }, [snake, food, gridSize, mode, isPlaying, specialFood]);\n\n  // 特殊エサの効果を処理\n  const handleSpecialFoodEffect = useCallback((type) => {\n    switch (type) {\n      case 'yellow':\n        setScore(s => s + 3); // 黄色は3点追加\n        break;\n      case 'blue':\n        setTimeLeft(prev => prev + 5); // 青は時間5秒追加\n        break;\n      case 'black':\n        setSnake(prev => { // 黒はヘビの長さを5増やす\n          const tail = prev[prev.length - 1];\n          const newSegments = Array(5).fill(tail);\n          return [...prev, ...newSegments];\n        });\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // resetGameの定義\n  const resetGame = useCallback(() => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    setFood([0, 0]); // エサを初期位置に戻す（次回開始時に新しい位置が生成される）\n  }, [initialSnake]);\n\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n\n  const moveSnake = useCallback(() => {\n    if (!isPlaying || gameOver) return;\n\n    setSnake(prevSnake => {\n      const head = [...prevSnake[0]];\n      \n      switch (directionRef.current) {\n        case 'UP':\n          head[1] -= 1;\n          break;\n        case 'DOWN':\n          head[1] += 1;\n          break;\n        case 'LEFT':\n          head[0] -= 1;\n          break;\n        case 'RIGHT':\n          head[0] += 1;\n          break;\n        default:\n          break;\n      }\n\n      // 壁やヘビ自身との衝突判定\n      if (checkCollision(head)) {\n        setGameOver(true);\n        setIsPlaying(false);\n        return prevSnake;\n      }\n\n      const newSnake = [head];\n\n      // 通常のエサとの衝突判定\n      if (head[0] === food[0] && head[1] === food[1]) {\n        setScore(s => s + 1);\n        generateFood();\n        newSnake.push(...prevSnake);\n      } else {\n        newSnake.push(...prevSnake.slice(0, -1));\n      }\n\n      // 特殊エサとの衝突判定を追加\n      if (specialFood && head[0] === specialFood.position[0] && head[1] === specialFood.position[1]) {\n        handleSpecialFoodEffect(specialFood.type);\n        setSpecialFood(null);\n      }\n\n      return newSnake;\n    });\n  }, [isPlaying, gameOver, food, generateFood, gridSize, specialFood, handleSpecialFoodEffect, checkCollision]);\n\n  // エサの生成を管理するuseEffect\n  useEffect(() => {\n    // エサが初期位置[0,0]の時のみ生成\n    if (food[0] === 0 && food[1] === 0) {\n      generateFood();\n    }\n  }, [generateFood, food]);\n\n  // 特殊エサの生成タイマー\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) {\n      setSpecialFood(null); // プレイ中でない場合は特殊エサを消す\n      return;\n    }\n\n    // 10秒ごとに特殊エサを生成\n    const interval = setInterval(() => {\n      generateSpecialFood();\n    }, 10000); // 10秒間隔\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [mode, isPlaying, generateSpecialFood]);\n\n  // アイテムの効果を処理する関数\n  const handleItemEffect = useCallback((itemId) => {\n    switch (itemId) {\n      case 'speed':\n        setActiveItems(prev => prev.map(item => \n          item.id === 'speed' ? { ...item, isActive: true, timeLeft: 10 } : item\n        ));\n        break;\n      case 'shield':\n        setActiveItems(prev => prev.map(item => \n          item.id === 'shield' ? { ...item, isActive: true, timeLeft: 5 } : item\n        ));\n        break;\n      case 'magnet':\n        setActiveItems(prev => prev.map(item => \n          item.id === 'magnet' ? { ...item, isActive: true, timeLeft: 10 } : item\n        ));\n        break;\n      case 'double':\n        setActiveItems(prev => prev.map(item => \n          item.id === 'double' ? { ...item, isActive: true, timeLeft: 15 } : item\n        ));\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // アイテムの効果時間を管理\n  useEffect(() => {\n    if (!isPlaying || activeItems.every(item => !item.isActive)) return;\n\n    const timer = setInterval(() => {\n      setActiveItems(prev => prev.map(item => {\n        if (!item.isActive) return item;\n        const newTimeLeft = item.timeLeft - 1;\n        return {\n          ...item,\n          isActive: newTimeLeft > 0,\n          timeLeft: Math.max(0, newTimeLeft)\n        };\n      }));\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isPlaying, activeItems]);\n\n  // キーボード入力の処理を修正\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (e.key === 'ArrowUp' || \n          e.key === 'ArrowDown' || \n          e.key === 'ArrowLeft' || \n          e.key === 'ArrowRight' || \n          e.code === 'Space' ||\n          e.key === '1' ||\n          e.key === '2') {\n        e.preventDefault();\n      }\n\n      if (!isPlaying) return;\n\n      // アイテムの使用（1キーで1つ目、2キーで2つ目のアイテム）\n      if (e.key === '1' && activeItems[0] && !activeItems[0].isActive) {\n        handleItemEffect(activeItems[0].id);\n      }\n      if (e.key === '2' && activeItems[1] && !activeItems[1].isActive) {\n        handleItemEffect(activeItems[1].id);\n      }\n\n      // アイテム効果の適用\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed, resetGame, activeItems, handleItemEffect]);\n\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      if (food[0] === 0 && food[1] === 0) {\n        generateFood(); // エサが初期位置の場合のみ生成\n      }\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を修正\n  const updateScores = useCallback(async (newScore) => {\n    try {\n      let collectionName;\n      \n      // モードに応じたコレクション名を設定\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        collectionName = 'scorestime';\n      } else if (mode === 'difficulty') {\n        collectionName = getCollectionName(mode, difficulty);\n      } else if (mode === 'item') {\n        collectionName = 'scoresitem'; // アイテムモード用のコレクション\n      } else {\n        collectionName = 'scores'; // 通常モード\n      }\n\n      const scoresRef = collection(db, collectionName);\n      const scoreData = {\n        score: newScore,\n        date: new Date(),\n        items: selectedItems || [] // アイテムモードの場合、選択したアイテムも保存\n      };\n\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft, selectedItems]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    let collectionName;\n    \n    // コレクション名の設定\n    if (mode === 'time') {\n      collectionName = 'scorestime';\n    } else if (mode === 'difficulty') {\n      collectionName = getCollectionName(mode, difficulty);\n    } else if (mode === 'item') {\n      collectionName = 'scoresitem';\n    } else {\n      collectionName = 'scores';\n    }\n\n    const scoresRef = collection(db, collectionName);\n    \n    // クエリの設定\n    const queryConstraints = [\n      orderBy('score', 'desc'),\n      limit(10)\n    ];\n\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString(),\n        items: doc.data().items || [] // アイテム情報を取得\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n\n      const rankedScores = scores.map((score) => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n\n    if (mode === 'time' && timeLeft > 0) {\n      // 制限時間モードでは即座に再開\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      generateFood(); // 新しい餌を生成\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake, generateFood]);\n\n  // ゲームオーバー時のスコア更新を追加\n  useEffect(() => {\n    if (gameOver && score > 0 && mode !== 'time') {\n      updateScores(score);\n    }\n  }, [gameOver, score, mode, updateScores]);\n\n  // ハイスコアの更新処理を追加\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n      localStorage.setItem('snakeHighScore', score.toString());\n    }\n  }, [score, highScore]);\n\n  // 壁との衝突判定を修正（シールド効果の適用）\n  const checkCollision = useCallback((head) => {\n    const hasShield = activeItems.find(item => item.id === 'shield' && item.isActive);\n    \n    if (hasShield) return false;\n\n    return (\n      head[0] < 0 ||\n      head[0] >= gridSize ||\n      head[1] < 0 ||\n      head[1] >= gridSize ||\n      snake.some(segment => segment[0] === head[0] && segment[1] === head[1])\n    );\n  }, [activeItems, gridSize, snake]);\n\n  return (\n    <div className=\"snake-game\">\n      <h2>\n        {mode === 'time' ? 'スネークゲーム - 制限時間モード' : \n         mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : \n         'スネークゲーム'}\n      </h2>\n      {mode === 'time' && (\n        <div className=\"time-left\">残り時間: {timeLeft}秒</div>\n      )}\n      <div className=\"score-container\">\n        <div className=\"score\">現在のスコア: {score}</div>\n        <div className=\"high-score\">ハイスコア: {highScore}</div>\n      </div>\n      <div className=\"game-board\">\n        {Array.from({ length: gridSize }, (_, row) => (\n          <div key={row} className=\"row\">\n            {Array.from({ length: gridSize }, (_, col) => {\n              const isSnake = snake.some(\n                segment => segment[0] === col && segment[1] === row\n              );\n              const isFood = food[0] === col && food[1] === row;\n              const isSpecialFood = specialFood && \n                specialFood.position[0] === col && \n                specialFood.position[1] === row;\n              \n              let cellClass = 'cell';\n              if (isSnake) cellClass += ' snake';\n              if (isFood) cellClass += ' food';\n              if (isSpecialFood) cellClass += ` special-food-${specialFood.type}`;\n              \n              return (\n                <div\n                  key={`${row}-${col}`}\n                  className={cellClass}\n                />\n              );\n            })}\n          </div>\n        ))}\n      </div>\n      <div className=\"controls\">\n        {!isPlaying && !gameOver && !isTimeUp && (\n          <button onClick={startGame} className=\"start-button\">\n            スタート\n          </button>\n        )}\n        {isPlaying && (\n          <button onClick={() => setIsPlaying(false)} className=\"pause-button\">\n            一時停止\n          </button>\n        )}\n        {(gameOver && mode !== 'time') && (\n          <button onClick={resetGame} className=\"retry-button\">\n            もう一度プレイ\n          </button>\n        )}\n      </div>\n      <div className=\"ranking\">\n        <h3>歴代トップ5</h3>\n        <div className=\"ranking-list\">\n          {topScores.map((score) => (\n            <div key={score.id} className=\"ranking-item\">\n              <span className=\"rank\">{score.rank}位</span>\n              <span className=\"score-value\">{score.score}点</span>\n              {mode === 'item' && score.items && (\n                <span className=\"items-used\">\n                  使用アイテム: {score.items.map(item => {\n                    const itemInfo = items.find(i => i.id === item);\n                    return itemInfo ? itemInfo.icon : '';\n                  }).join(' ')}\n                </span>\n              )}\n              <span className=\"score-date\">{score.date}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* アイテム情報の表示 */}\n      {mode === 'item' && (\n        <div className=\"active-items\">\n          {activeItems.map((item, index) => (\n            <div key={item.id} className={`item-status ${item.isActive ? 'active' : ''}`}>\n              <div className=\"item-key\">{index + 1}</div>\n              <div className=\"item-icon\">\n                {item.id === 'speed' && '⚡'}\n                {item.id === 'shield' && '🛡️'}\n                {item.id === 'magnet' && '🧲'}\n                {item.id === 'double' && '✨'}\n              </div>\n              {item.isActive && <div className=\"item-timer\">{item.timeLeft}秒</div>}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SnakeGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}