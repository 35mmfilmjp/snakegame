{"ast":null,"code":"var _jsxFileName = \"/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\n\n// エサの種類を定義\nconst FOOD_TYPES = {\n  NORMAL: 'normal',\n  YELLOW: 'yellow',\n  BLUE: 'blue',\n  BLACK: 'black'\n};\nconst SnakeGame = ({\n  mode = 'normal',\n  difficulty = 'normal',\n  settings = null,\n  onGameOver = null\n}) => {\n  _s();\n  // グリッドの中央を計算\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n\n  // 中央から右向きに3マス分の初期位置を設定\n  const initialSnake = [[centerX, centerY],\n  // 頭\n  [centerX - 1, centerY],\n  // 胴体\n  [centerX - 2, centerY] // 尾\n  ];\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [specialFood, setSpecialFood] = useState(null); // 特殊エサの位置\n  const [specialFoodType, setSpecialFoodType] = useState(null); // 特殊エサの種類\n  const [specialFoodTimer, setSpecialFoodTimer] = useState(null);\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n  const calculateSpeed = useCallback(score => {\n    if (mode === 'difficulty' && settings) {\n      const speedIncrease = Math.floor(score / 5) * settings.speedIncrease;\n      return Math.max(settings.minSpeed, settings.speed - speedIncrease);\n    }\n    // 通常モードのデフォルト速度計算\n    const baseSpeed = 200;\n    const speedIncrease = Math.floor(score / 5) * 10;\n    return Math.max(60, baseSpeed - speedIncrease);\n  }, [mode, settings]);\n  const generateFood = useCallback(() => {\n    let newFood;\n    do {\n      newFood = [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]));\n    setFood(newFood);\n  }, [snake]);\n\n  // 特殊エサの生成\n  const generateSpecialFood = useCallback(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    // 既存の特殊エサがある場合はクリア\n    if (specialFoodTimer) {\n      clearTimeout(specialFoodTimer);\n    }\n\n    // 既存の通常エサと重ならない、かつヘビと重ならない位置を探す\n    let newFood;\n    do {\n      newFood = [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]) || food[0] === newFood[0] && food[1] === newFood[1]);\n    const types = [FOOD_TYPES.YELLOW, FOOD_TYPES.BLUE, FOOD_TYPES.BLACK];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    setSpecialFood(newFood);\n    setSpecialFoodType(randomType);\n\n    // 5秒後に特殊エサを消す\n    const timer = setTimeout(() => {\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n      setSpecialFoodTimer(null);\n    }, 5000);\n    setSpecialFoodTimer(timer);\n  }, [mode, isPlaying, snake, food, gridSize]);\n\n  // ランダムな間隔で特殊エサを生成\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    // 初回の特殊エサ生成\n    const initialDelay = Math.floor(Math.random() * 3000 + 2000); // 2-5秒後に最初の特殊エサ\n    const firstTimer = setTimeout(generateSpecialFood, initialDelay);\n\n    // 定期的な特殊エサの生成\n    const intervalTimer = setInterval(() => {\n      if (isPlaying) {\n        generateSpecialFood();\n      }\n    }, 7000); // 7秒ごとに生成を試みる\n\n    return () => {\n      clearTimeout(firstTimer);\n      clearInterval(intervalTimer);\n      if (specialFoodTimer) {\n        clearTimeout(specialFoodTimer);\n      }\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n    };\n  }, [mode, isPlaying, generateSpecialFood]);\n\n  // エサを食べた時の処理を修正\n  const handleEatFood = useCallback(foodPosition => {\n    let scoreIncrease = 1;\n    let lengthIncrease = 1;\n\n    // 特殊エサを食べた場合\n    if (specialFood && foodPosition[0] === specialFood[0] && foodPosition[1] === specialFood[1]) {\n      switch (specialFoodType) {\n        case FOOD_TYPES.YELLOW:\n          scoreIncrease = 3;\n          break;\n        case FOOD_TYPES.BLUE:\n          if (mode === 'time') {\n            setTimeLeft(prev => prev + 5);\n          }\n          break;\n        case FOOD_TYPES.BLACK:\n          lengthIncrease = 5;\n          break;\n        default:\n          break;\n      }\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n      if (specialFoodTimer) clearTimeout(specialFoodTimer);\n    } else {\n      // 通常のエサを食べた場合\n      generateFood();\n    }\n    setScore(prev => prev + scoreIncrease);\n\n    // ヘビの長さを増やす\n    const tail = [...snake];\n    for (let i = 0; i < lengthIncrease; i++) {\n      tail.push([...tail[tail.length - 1]]);\n    }\n    setSnake(tail);\n  }, [specialFood, specialFoodType, specialFoodTimer, snake, mode, generateFood]);\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n  const moveSnake = useCallback(() => {\n    if (gameOver || !isPlaying) return;\n    const newSnake = [...snake];\n    const head = [...newSnake[0]];\n    switch (directionRef.current) {\n      case 'UP':\n        head[1] -= 1;\n        break;\n      case 'DOWN':\n        head[1] += 1;\n        break;\n      case 'LEFT':\n        head[0] -= 1;\n        break;\n      case 'RIGHT':\n        head[0] += 1;\n        break;\n      default:\n        break;\n    }\n    if (head[0] < 0 || head[0] >= gridSize || head[1] < 0 || head[1] >= gridSize) {\n      setGameOver(true);\n      return;\n    }\n    if (newSnake.some(segment => segment[0] === head[0] && segment[1] === head[1])) {\n      setGameOver(true);\n      return;\n    }\n    newSnake.unshift(head);\n\n    // 通常のエサを食べた場合\n    if (head[0] === food[0] && head[1] === food[1]) {\n      handleEatFood(head);\n    }\n    // 特殊エサを食べた場合\n    else if (specialFood && head[0] === specialFood[0] && head[1] === specialFood[1]) {\n      handleEatFood(head);\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, [snake, food, specialFood, gameOver, isPlaying, handleEatFood]);\n  useEffect(() => {\n    if (!isPlaying && !gameOver) {\n      generateFood();\n    }\n  }, []);\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {\n        e.preventDefault();\n      }\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n      if (!isPlaying) return;\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed]);\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    setSpecialFood(null);\n    setSpecialFoodType(null);\n    if (specialFoodTimer) {\n      clearTimeout(specialFoodTimer);\n    }\n    generateFood();\n  };\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を修正\n  const updateScores = useCallback(async newScore => {\n    try {\n      let collectionName;\n\n      // モードに応じたコレクション名を設定\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        collectionName = 'scorestime';\n      } else if (mode === 'difficulty') {\n        collectionName = getCollectionName(mode, difficulty);\n      } else {\n        collectionName = 'scores'; // 通常モード\n      }\n      const scoresRef = collection(db, collectionName);\n      const scoreData = {\n        score: newScore,\n        date: new Date()\n      };\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    // コレクション名の設定\n    const collectionName = mode === 'time' ? 'scorestime' : getCollectionName(mode, difficulty);\n    const scoresRef = collection(db, collectionName);\n\n    // クエリの設定\n    const queryConstraints = [orderBy('score', 'desc'), limit(10)];\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, snapshot => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString()\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n      const rankedScores = scores.map(score => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n    if (mode === 'time' && timeLeft > 0) {\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n      if (specialFoodTimer) {\n        clearTimeout(specialFoodTimer);\n      }\n      generateFood();\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake, generateFood, specialFoodTimer]);\n\n  // ゲームオーバー時のスコア更新を追加\n  useEffect(() => {\n    if (gameOver && score > 0 && mode !== 'time') {\n      updateScores(score);\n    }\n  }, [gameOver, score, mode, updateScores]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: mode === 'time' ? 'スネークゲーム - 制限時間モード' : mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : 'スネークゲーム'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this), mode === 'time' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-left\",\n      children: [\"\\u6B8B\\u308A\\u6642\\u9593: \", timeLeft, \"\\u79D2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"\\u73FE\\u5728\\u306E\\u30B9\\u30B3\\u30A2: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"high-score\",\n        children: [\"\\u30CF\\u30A4\\u30B9\\u30B3\\u30A2: \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: Array.from({\n        length: gridSize\n      }, (_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: Array.from({\n          length: gridSize\n        }, (_, col) => {\n          const isSnake = snake.some(segment => segment[0] === col && segment[1] === row);\n          const isNormalFood = food[0] === col && food[1] === row;\n          const isSpecialFood = specialFood && specialFood[0] === col && specialFood[1] === row;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${isSnake ? 'snake' : ''} ${isNormalFood ? 'food normal' : isSpecialFood ? `food ${specialFoodType}` : ''}`\n          }, `${row}-${col}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 17\n          }, this);\n        })\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [!isPlaying && !gameOver && !isTimeUp && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        className: \"start-button\",\n        children: \"\\u30B9\\u30BF\\u30FC\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this), isPlaying && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsPlaying(false),\n        className: \"pause-button\",\n        children: \"\\u4E00\\u6642\\u505C\\u6B62\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this), gameOver && mode !== 'time' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"retry-button\",\n        children: \"\\u3082\\u3046\\u4E00\\u5EA6\\u30D7\\u30EC\\u30A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ranking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6B74\\u4EE3\\u30C8\\u30C3\\u30D75\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ranking-list\",\n        children: topScores.map(score => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ranking-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"rank\",\n            children: [score.rank, \"\\u4F4D\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-value\",\n            children: [score.score, \"\\u70B9\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-date\",\n            children: score.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this)]\n        }, score.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 447,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"ISTX+CbDCQlkRj7SNOu2d6dF7Dg=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","db","collection","addDoc","query","orderBy","limit","getDocs","where","onSnapshot","jsxDEV","_jsxDEV","getCollectionName","mode","difficulty","FOOD_TYPES","NORMAL","YELLOW","BLUE","BLACK","SnakeGame","settings","onGameOver","_s","gridSize","centerX","Math","floor","centerY","initialSnake","snake","setSnake","food","setFood","specialFood","setSpecialFood","specialFoodType","setSpecialFoodType","specialFoodTimer","setSpecialFoodTimer","direction","setDirection","directionRef","gameOver","setGameOver","score","setScore","isPlaying","setIsPlaying","highScore","setHighScore","saved","localStorage","getItem","parseInt","topScores","setTopScores","timeLeft","setTimeLeft","initialTime","isTimeUp","setIsTimeUp","calculateSpeed","speedIncrease","max","minSpeed","speed","baseSpeed","generateFood","newFood","random","some","segment","generateSpecialFood","clearTimeout","types","randomType","length","timer","setTimeout","initialDelay","firstTimer","intervalTimer","setInterval","clearInterval","handleEatFood","foodPosition","scoreIncrease","lengthIncrease","prev","tail","i","push","current","moveSnake","newSnake","head","unshift","pop","handleKeyPress","e","key","code","preventDefault","resetGame","document","addEventListener","gameInterval","removeEventListener","startGame","updateScores","newScore","collectionName","scoresRef","scoreData","date","Date","error","console","queryConstraints","q","unsubscribe","snapshot","scores","docs","map","doc","id","data","toDate","toLocaleString","currentRank","prevScore","rankedScores","filter","s","rank","penaltyTime","className","children","label","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","_","row","col","isSnake","isNormalFood","isSpecialFood","onClick","_c","$RefreshReg$"],"sources":["/Users/zuuki/Desktop/Web/snake-game/src/components/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc, query, orderBy, limit, getDocs, where, onSnapshot } from 'firebase/firestore';\nimport '../styles/SnakeGame.css';\n\n// コレクション名を取得する関数を追加\nconst getCollectionName = (mode, difficulty) => {\n  if (mode === 'difficulty') {\n    switch (difficulty) {\n      case 'beginner':\n        return 'scoreslow';\n      case 'intermediate':\n        return 'scoresmiddle';\n      case 'advanced':\n        return 'scoreshigh';\n      default:\n        return 'scores';\n    }\n  }\n  return 'scores';\n};\n\n// エサの種類を定義\nconst FOOD_TYPES = {\n  NORMAL: 'normal',\n  YELLOW: 'yellow',\n  BLUE: 'blue',\n  BLACK: 'black'\n};\n\nconst SnakeGame = ({ mode = 'normal', difficulty = 'normal', settings = null, onGameOver = null }) => {\n  // グリッドの中央を計算\n  const gridSize = 20;\n  const centerX = Math.floor(gridSize / 2);\n  const centerY = Math.floor(gridSize / 2);\n  \n  // 中央から右向きに3マス分の初期位置を設定\n  const initialSnake = [\n    [centerX, centerY],     // 頭\n    [centerX - 1, centerY], // 胴体\n    [centerX - 2, centerY]  // 尾\n  ];\n\n  const [snake, setSnake] = useState(initialSnake);\n  const [food, setFood] = useState([0, 0]);\n  const [specialFood, setSpecialFood] = useState(null); // 特殊エサの位置\n  const [specialFoodType, setSpecialFoodType] = useState(null); // 特殊エサの種類\n  const [specialFoodTimer, setSpecialFoodTimer] = useState(null);\n  const [direction, setDirection] = useState('RIGHT');\n  const directionRef = useRef(direction);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [highScore, setHighScore] = useState(() => {\n    const saved = localStorage.getItem('snakeHighScore');\n    return saved ? parseInt(saved) : 0;\n  });\n  const [topScores, setTopScores] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(mode === 'time' ? settings.initialTime : null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n\n  const calculateSpeed = useCallback((score) => {\n    if (mode === 'difficulty' && settings) {\n      const speedIncrease = Math.floor(score / 5) * settings.speedIncrease;\n      return Math.max(settings.minSpeed, settings.speed - speedIncrease);\n    }\n    // 通常モードのデフォルト速度計算\n    const baseSpeed = 200;\n    const speedIncrease = Math.floor(score / 5) * 10;\n    return Math.max(60, baseSpeed - speedIncrease);\n  }, [mode, settings]);\n\n  const generateFood = useCallback(() => {\n    let newFood;\n    do {\n      newFood = [\n        Math.floor(Math.random() * gridSize),\n        Math.floor(Math.random() * gridSize),\n      ];\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]));\n    setFood(newFood);\n  }, [snake]);\n\n  // 特殊エサの生成\n  const generateSpecialFood = useCallback(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    // 既存の特殊エサがある場合はクリア\n    if (specialFoodTimer) {\n      clearTimeout(specialFoodTimer);\n    }\n\n    // 既存の通常エサと重ならない、かつヘビと重ならない位置を探す\n    let newFood;\n    do {\n      newFood = [\n        Math.floor(Math.random() * gridSize),\n        Math.floor(Math.random() * gridSize),\n      ];\n    } while (\n      snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]) ||\n      (food[0] === newFood[0] && food[1] === newFood[1])\n    );\n\n    const types = [FOOD_TYPES.YELLOW, FOOD_TYPES.BLUE, FOOD_TYPES.BLACK];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    \n    setSpecialFood(newFood);\n    setSpecialFoodType(randomType);\n\n    // 5秒後に特殊エサを消す\n    const timer = setTimeout(() => {\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n      setSpecialFoodTimer(null);\n    }, 5000);\n\n    setSpecialFoodTimer(timer);\n  }, [mode, isPlaying, snake, food, gridSize]);\n\n  // ランダムな間隔で特殊エサを生成\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    // 初回の特殊エサ生成\n    const initialDelay = Math.floor(Math.random() * 3000 + 2000); // 2-5秒後に最初の特殊エサ\n    const firstTimer = setTimeout(generateSpecialFood, initialDelay);\n\n    // 定期的な特殊エサの生成\n    const intervalTimer = setInterval(() => {\n      if (isPlaying) {\n        generateSpecialFood();\n      }\n    }, 7000); // 7秒ごとに生成を試みる\n\n    return () => {\n      clearTimeout(firstTimer);\n      clearInterval(intervalTimer);\n      if (specialFoodTimer) {\n        clearTimeout(specialFoodTimer);\n      }\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n    };\n  }, [mode, isPlaying, generateSpecialFood]);\n\n  // エサを食べた時の処理を修正\n  const handleEatFood = useCallback((foodPosition) => {\n    let scoreIncrease = 1;\n    let lengthIncrease = 1;\n    \n    // 特殊エサを食べた場合\n    if (specialFood && \n        foodPosition[0] === specialFood[0] && \n        foodPosition[1] === specialFood[1]) {\n      switch (specialFoodType) {\n        case FOOD_TYPES.YELLOW:\n          scoreIncrease = 3;\n          break;\n        case FOOD_TYPES.BLUE:\n          if (mode === 'time') {\n            setTimeLeft(prev => prev + 5);\n          }\n          break;\n        case FOOD_TYPES.BLACK:\n          lengthIncrease = 5;\n          break;\n        default:\n          break;\n      }\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n      if (specialFoodTimer) clearTimeout(specialFoodTimer);\n    } else {\n      // 通常のエサを食べた場合\n      generateFood();\n    }\n\n    setScore(prev => prev + scoreIncrease);\n    \n    // ヘビの長さを増やす\n    const tail = [...snake];\n    for (let i = 0; i < lengthIncrease; i++) {\n      tail.push([...tail[tail.length - 1]]);\n    }\n    setSnake(tail);\n  }, [specialFood, specialFoodType, specialFoodTimer, snake, mode, generateFood]);\n\n  useEffect(() => {\n    directionRef.current = direction;\n  }, [direction]);\n\n  const moveSnake = useCallback(() => {\n    if (gameOver || !isPlaying) return;\n\n    const newSnake = [...snake];\n    const head = [...newSnake[0]];\n\n    switch (directionRef.current) {\n      case 'UP':\n        head[1] -= 1;\n        break;\n      case 'DOWN':\n        head[1] += 1;\n        break;\n      case 'LEFT':\n        head[0] -= 1;\n        break;\n      case 'RIGHT':\n        head[0] += 1;\n        break;\n      default:\n        break;\n    }\n\n    if (\n      head[0] < 0 ||\n      head[0] >= gridSize ||\n      head[1] < 0 ||\n      head[1] >= gridSize\n    ) {\n      setGameOver(true);\n      return;\n    }\n\n    if (newSnake.some(segment => segment[0] === head[0] && segment[1] === head[1])) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.unshift(head);\n\n    // 通常のエサを食べた場合\n    if (head[0] === food[0] && head[1] === food[1]) {\n      handleEatFood(head);\n    } \n    // 特殊エサを食べた場合\n    else if (specialFood && head[0] === specialFood[0] && head[1] === specialFood[1]) {\n      handleEatFood(head);\n    }\n    else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n  }, [snake, food, specialFood, gameOver, isPlaying, handleEatFood]);\n\n  useEffect(() => {\n    if (!isPlaying && !gameOver) {\n      generateFood();\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (e.key === 'ArrowUp' || \n          e.key === 'ArrowDown' || \n          e.key === 'ArrowLeft' || \n          e.key === 'ArrowRight' || \n          e.code === 'Space') {\n        e.preventDefault();\n      }\n\n      if (e.code === 'Space') {\n        if (gameOver) {\n          resetGame();\n        } else {\n          setIsPlaying(prev => !prev);\n        }\n        return;\n      }\n\n      if (!isPlaying) return;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (directionRef.current !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (directionRef.current !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (directionRef.current !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (directionRef.current !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    const gameInterval = setInterval(moveSnake, calculateSpeed(score));\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearInterval(gameInterval);\n    };\n  }, [moveSnake, gameOver, isPlaying, score, calculateSpeed]);\n\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection('RIGHT');\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(false);\n    setSpecialFood(null);\n    setSpecialFoodType(null);\n    if (specialFoodTimer) {\n      clearTimeout(specialFoodTimer);\n    }\n    generateFood();\n  };\n\n  const startGame = () => {\n    if (!isPlaying && !gameOver) {\n      setIsPlaying(true);\n    }\n  };\n\n  // スコアを保存する関数を修正\n  const updateScores = useCallback(async (newScore) => {\n    try {\n      let collectionName;\n      \n      // モードに応じたコレクション名を設定\n      if (mode === 'time') {\n        if (timeLeft > 0) return; // 時間が残っている場合は記録しない\n        collectionName = 'scorestime';\n      } else if (mode === 'difficulty') {\n        collectionName = getCollectionName(mode, difficulty);\n      } else {\n        collectionName = 'scores'; // 通常モード\n      }\n\n      const scoresRef = collection(db, collectionName);\n      const scoreData = {\n        score: newScore,\n        date: new Date()\n      };\n\n      await addDoc(scoresRef, scoreData);\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [mode, difficulty, timeLeft]);\n\n  // Firestoreのリアルタイムリスナーを設定\n  useEffect(() => {\n    // コレクション名の設定\n    const collectionName = mode === 'time' ? 'scorestime' : getCollectionName(mode, difficulty);\n    const scoresRef = collection(db, collectionName);\n    \n    // クエリの設定\n    const queryConstraints = [\n      orderBy('score', 'desc'),\n      limit(10)\n    ];\n\n    const q = query(scoresRef, ...queryConstraints);\n\n    // リアルタイムリスナーを設定\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const scores = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        date: doc.data().date.toDate().toLocaleString()\n      }));\n\n      // 同点のスコアに同じ順位を付ける\n      let currentRank = 1;\n      let prevScore = null;\n\n      const rankedScores = scores.map((score) => {\n        if (prevScore !== null && score.score !== prevScore) {\n          currentRank = scores.filter(s => s.score > score.score).length + 1;\n        }\n        prevScore = score.score;\n        return {\n          ...score,\n          rank: currentRank\n        };\n      });\n\n      const topScores = rankedScores.filter(score => score.rank <= 5);\n      setTopScores(topScores);\n    });\n\n    return () => unsubscribe();\n  }, [mode, difficulty]);\n\n  // 制限時間の処理\n  useEffect(() => {\n    if (mode !== 'time' || !isPlaying) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          setIsTimeUp(true);\n          setIsPlaying(false);\n          // スコアの記録は別のuseEffectで行う\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isPlaying, mode]);\n\n  // 時間切れ時のスコア記録用のuseEffect\n  useEffect(() => {\n    if (mode === 'time' && timeLeft === 0 && !isPlaying && !gameOver) {\n      updateScores(score);\n    }\n  }, [mode, timeLeft, isPlaying, gameOver, score, updateScores]);\n\n  // ゲームオーバー時の処理を修正\n  useEffect(() => {\n    if (!gameOver) return;\n\n    if (mode === 'time' && timeLeft > 0) {\n      setTimeLeft(prev => Math.max(0, prev - settings.penaltyTime));\n      setGameOver(false);\n      setSnake(initialSnake);\n      setDirection('RIGHT');\n      setIsPlaying(true);\n      setSpecialFood(null);\n      setSpecialFoodType(null);\n      if (specialFoodTimer) {\n        clearTimeout(specialFoodTimer);\n      }\n      generateFood();\n    }\n  }, [gameOver, mode, timeLeft, settings, initialSnake, generateFood, specialFoodTimer]);\n\n  // ゲームオーバー時のスコア更新を追加\n  useEffect(() => {\n    if (gameOver && score > 0 && mode !== 'time') {\n      updateScores(score);\n    }\n  }, [gameOver, score, mode, updateScores]);\n\n  return (\n    <div className=\"snake-game\">\n      <h2>\n        {mode === 'time' ? 'スネークゲーム - 制限時間モード' : \n         mode === 'difficulty' ? `スネークゲーム - ${settings.label}` : \n         'スネークゲーム'}\n      </h2>\n      {mode === 'time' && (\n        <div className=\"time-left\">残り時間: {timeLeft}秒</div>\n      )}\n      <div className=\"score-container\">\n        <div className=\"score\">現在のスコア: {score}</div>\n        <div className=\"high-score\">ハイスコア: {highScore}</div>\n      </div>\n      <div className=\"game-board\">\n        {Array.from({ length: gridSize }, (_, row) => (\n          <div key={row} className=\"row\">\n            {Array.from({ length: gridSize }, (_, col) => {\n              const isSnake = snake.some(\n                segment => segment[0] === col && segment[1] === row\n              );\n              const isNormalFood = food[0] === col && food[1] === row;\n              const isSpecialFood = specialFood && \n                                  specialFood[0] === col && \n                                  specialFood[1] === row;\n              return (\n                <div\n                  key={`${row}-${col}`}\n                  className={`cell ${isSnake ? 'snake' : ''} ${\n                    isNormalFood ? 'food normal' : \n                    isSpecialFood ? `food ${specialFoodType}` : ''\n                  }`}\n                />\n              );\n            })}\n          </div>\n        ))}\n      </div>\n      <div className=\"controls\">\n        {!isPlaying && !gameOver && !isTimeUp && (\n          <button onClick={startGame} className=\"start-button\">\n            スタート\n          </button>\n        )}\n        {isPlaying && (\n          <button onClick={() => setIsPlaying(false)} className=\"pause-button\">\n            一時停止\n          </button>\n        )}\n        {(gameOver && mode !== 'time') && (\n          <button onClick={resetGame} className=\"retry-button\">\n            もう一度プレイ\n          </button>\n        )}\n      </div>\n      <div className=\"ranking\">\n        <h3>歴代トップ5</h3>\n        <div className=\"ranking-list\">\n          {topScores.map((score) => (\n            <div key={score.id} className=\"ranking-item\">\n              <span className=\"rank\">{score.rank}位</span>\n              <span className=\"score-value\">{score.score}点</span>\n              <span className=\"score-date\">{score.date}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SnakeGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}